using System;
using System.Collections.Generic;
using System.Reflection;
// Token: 0x0200095A RID: 2394
public class GlobalEventManager : Singleton<GlobalEventManager>
{
	// Token: 0x06004741 RID: 18241 RVA: 0x00184C8D File Offset: 0x0018308D
	public GlobalEventManager()
	{
	}

	// Token: 0x06004742 RID: 18242 RVA: 0x00184C95 File Offset: 0x00183095
	public override void Awake()
	{
		base.Awake();
		this._eventListeners = new Dictionary<string, List<object>>();
		this._onceListeners = new Dictionary<string, List<object>>();
        this._moddedListenters = new Dictionary<string, List<fakeAction>>();
    }

	// Token: 0x06004743 RID: 18243 RVA: 0x00184CB4 File Offset: 0x001830B4
	public void AddEventListenerOnce<T>(string eventName, Action<T> callback)
	{
		List<object> onceCallbackList = this.getOnceCallbackList(eventName);
		onceCallbackList.Add(callback);
	}

	// Token: 0x06004744 RID: 18244 RVA: 0x00184CD0 File Offset: 0x001830D0
	public void AddEventListenerOnce(string eventName, Action callback)
	{
		List<object> onceCallbackList = this.getOnceCallbackList(eventName);
		onceCallbackList.Add(callback);
	}

	// Token: 0x06004745 RID: 18245 RVA: 0x00184CEC File Offset: 0x001830EC
	public void AddEventListener<T>(string eventName, Action<T> callback)
	{
		List<object> callbackList = this.getCallbackList(eventName);
		if (callbackList.Contains(callback))
		{
		}
		callbackList.Add(callback);
	}
	
	// Token: 0x06004746 RID: 18246 RVA: 0x00184D14 File Offset: 0x00183114
	public void AddEventListener(string eventName, Action callback)
	{
		List<object> callbackList = this.getCallbackList(eventName);
		if (callbackList.Contains(callback))
		{
		}
		callbackList.Add(callback);
	}

	public void AddModdedEventListener(string eventName, Type type, string meahodName,object instance)
	{
		MethodInfo method = type.GetMethod(meahodName);

		fakeAction callback = new fakeAction(method,instance);
		List<fakeAction> callbackList = this.getModdedCallbackList(eventName);
		if (callbackList.Contains(callback))
		{
		}
		callbackList.Add(callback);
	}
	// Token: 0x06004747 RID: 18247 RVA: 0x00184D3C File Offset: 0x0018313C
	public void RemoveEventListener(string eventName, Action callback)
	{
		List<object> callbackList = this.getCallbackList(eventName);
		if (!callbackList.Contains(callback))
		{
		}
		callbackList.Remove(callback);
	}
	public void RemoveModdedEventListener(string eventName, Type type, string meahodName,object instance)
	{
		MethodInfo method = type.GetMethod(meahodName);

		fakeAction callback = new fakeAction(method,instance);
		List<object> callbackList = this.getCallbackList(eventName);
		if (!callbackList.Contains(callback))
		{
		}
		callbackList.Remove(callback);
	}

	// Token: 0x06004748 RID: 18248 RVA: 0x00184D68 File Offset: 0x00183168
	public void RemoveEventListener<T>(string eventName, Action<T> callback)
	{
		List<object> callbackList = this.getCallbackList(eventName);
		if (!callbackList.Contains(callback))
		{
		}
		callbackList.Remove(callback);
	}

	// Token: 0x06004749 RID: 18249 RVA: 0x00184D94 File Offset: 0x00183194
	public void Dispatch(string eventName)
	{
		List<object> callbackList = this.getCallbackList(eventName);
		foreach (object obj in callbackList)
		{
			Action action = (Action)obj;
			action();
		}
		List<object> onceCallbackList = this.getOnceCallbackList(eventName);
		foreach (object obj2 in onceCallbackList)
		{
			Action action2 = (Action)obj2;
			action2();
		}

		List<fakeAction> moddedCallbackList = this.getModdedCallbackList(eventName);
		foreach (fakeAction obj2 in moddedCallbackList)
		{
			obj2.Invoke(new object[]{});
		}

		onceCallbackList.Clear();
	}
	private Dictionary<string, List<fakeAction>> _moddedListenters;

	// Token: 0x0600474A RID: 18250 RVA: 0x00184E54 File Offset: 0x00183254
	public void Dispatch<T>(string eventName, T argument)
	{
		List<object> callbackList = this.getCallbackList(eventName);
		for (int i = 0; i < callbackList.Count; i++)
		{
			Action<T> action = callbackList[i] as Action<T>;
			if (action != null)
			{
				action(argument);
			}
		}
		List<object> onceCallbackList = this.getOnceCallbackList(eventName);
		for (int j = 0; j < onceCallbackList.Count; j++)
		{
			Action<T> action2 = onceCallbackList[j] as Action<T>;
			if (action2 != null)
			{
				action2(argument);
			}
		}

		List<fakeAction> moddedCallbackList = this.getModdedCallbackList(eventName);
		for (int j = 0; j < moddedCallbackList.Count; j++)
		{
			moddedCallbackList[j].Invoke(new object[]{});
		}
		onceCallbackList.Clear();
	}

	// Token: 0x0600474B RID: 18251 RVA: 0x00184EE1 File Offset: 0x001832E1
	private List<object> getCallbackList(string eventName)
	{
		if (!this._eventListeners.ContainsKey(eventName))
		{
			this._eventListeners[eventName] = new List<object>();
		}
		return this._eventListeners[eventName];
	}

	// Token: 0x0600474C RID: 18252 RVA: 0x00184F11 File Offset: 0x00183311
	private List<object> getOnceCallbackList(string eventName)
	{
		if (!this._onceListeners.ContainsKey(eventName))
		{
			this._onceListeners[eventName] = new List<object>();
		}
		return this._onceListeners[eventName];
	}
	private List<fakeAction> getModdedCallbackList(string eventName)
	{
		if (!this._moddedListenters.ContainsKey(eventName))
		{
			this._moddedListenters[eventName] = new List<fakeAction>();
		}
		return this._moddedListenters[eventName];
	}
	// Token: 0x04003594 RID: 13716
	private Dictionary<string, List<object>> _eventListeners;

	// Token: 0x04003595 RID: 13717
	private Dictionary<string, List<object>> _onceListeners;
}

using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using UnityEngine;

// Token: 0x02000A98 RID: 2712
public class LevelObjectsLibraryManager : Singleton<LevelObjectsLibraryManager>
{
    // Token: 0x06004DB3 RID: 19891
    public LevelObjectsLibraryManager()
    {
    }

    // Token: 0x06004DB4 RID: 19892
    public void Initialize()
    {
        string text = (Resources.Load("Data/LevelObjects/LevelObjectManifest") as TextAsset).text;

        string[] files = Directory.GetFiles(LevelObjectsLibraryManager.getSubdomain(Application.dataPath) + "mods");
        List<LevelObjectEntry> moddedObjects = new List<LevelObjectEntry>();
        for (int i = 0; i < files.Length; i++)
        {
            if (files[i].EndsWith(".json"))
            {
                string value = File.ReadAllText(files[i]);
                moddedObjects = addToList(moddedObjects, JsonConvert.DeserializeObject<List<LevelObjectEntry>>(value, LevelObjectsLibraryManager.getSerializerSettings()));
            }
        }
        this._levelObjects = JsonConvert.DeserializeObject<List<LevelObjectEntry>>(text, LevelObjectsLibraryManager.getSerializerSettings());


        _levelObjects = addToList(_levelObjects, moddedObjects);

        this._visibleLevelObjects = new List<LevelObjectEntry>(this._levelObjects);
        this._visibleLevelObjects.RemoveAll((LevelObjectEntry entry) => entry.IsUnityEditorOnly());
    }
    List<LevelObjectEntry> addToList(List<LevelObjectEntry> org, List<LevelObjectEntry> _new)
    {
        for (int i = 0; i < _new.Count; i++)
        {
            org.Add(_new[i]);
        }
        return org;

    }
    // Token: 0x06004DB5 RID: 19893
    public List<LevelObjectEntry> GetVisibleLevelEditorObjects()
    {
        return this._visibleLevelObjects;
    }

    // Token: 0x06004DB6 RID: 19894
    public List<LevelObjectEntry> GetLevelObjectsInLibrary()
    {
        return this._levelObjects;
    }

    // Token: 0x06004DB7 RID: 19895
    public static JsonSerializerSettings getSerializerSettings()
    {
        return new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All
        };
    }

    // Token: 0x06004DB8 RID: 19896
    public List<LevelObjectEntry> GetAllEnemyLevelObjects()
    {
        List<LevelObjectEntry> list = new List<LevelObjectEntry>();
        for (int i = 0; i < this._levelObjects.Count; i++)
        {
            if (this._levelObjects[i].IsEnemy())
            {
                list.Add(this._levelObjects[i]);
            }
        }
        return list;
    }

    // Token: 0x06006020 RID: 24608
    private static string getSubdomain(string path)
    {
        string[] subDomains = path.Split(new char[]
        {
            '/'
        });
        string newDomain = "";
        for (int i = 0; i < subDomains.Length - 1; i++)
        {
            newDomain = newDomain + subDomains[i] + "/";
        }
        return newDomain;
    }

    // Token: 0x04003B33 RID: 15155
    private List<LevelObjectEntry> _levelObjects;

    // Token: 0x04003B34 RID: 15156
    private List<LevelObjectEntry> _visibleLevelObjects;
}
using System;
using System.IO;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

// Token: 0x02000A9B RID: 2715
public class LibraryListItemDisplay : MonoBehaviour, IPointerUpHandler, IEventSystemHandler, IPointerDownHandler, IDragHandler
{
    // Token: 0x06004DC0 RID: 19904 RVA: 0x000425F4 File Offset: 0x000407F4
    public void Populate(LevelObjectEntry levelObjectEntry)
    {
        this.ItemName.text = levelObjectEntry.DisplayName;
        this._item = levelObjectEntry;
        this.ItemPreviewImage.sprite = this.PNGPathToSprite(levelObjectEntry.PreviewPathUnderResources);
    }

    // Token: 0x06004DC1 RID: 19905
    private Sprite PNGPathToSprite(string previewPathUnderResources)
    {
        Texture2D texture2D = new Texture2D(10, 10);
        if (previewPathUnderResources.StartsWith("modded/"))
        {
            string temp = previewPathUnderResources.Replace("modded/", "");
            byte[] data = File.ReadAllBytes(LibraryListItemDisplay.getSubdomain(Application.dataPath) + "mods/" + temp);
            texture2D.LoadImage(data);
        }
        else
        {
            texture2D = Resources.Load<Texture2D>(previewPathUnderResources.Replace(".png", string.Empty));
        }
        return Sprite.Create(texture2D, new Rect(0f, 0f, (float)texture2D.width, (float)texture2D.height), new Vector2(0.5f, 0.5f), 100f);
    }

    // Token: 0x06004DC2 RID: 19906 RVA: 0x00042625 File Offset: 0x00040825
    public bool IsInFolder(string folderPath)
    {
        return this._item.PathUnderResources.StartsWith(folderPath);
    }

    // Token: 0x06004DC3 RID: 19907 RVA: 0x00017899 File Offset: 0x00015A99
    public void OnPointerUp(PointerEventData eventData)
    {
    }

    // Token: 0x06004DC4 RID: 19908 RVA: 0x00042638 File Offset: 0x00040838
    public void OnPointerDown(PointerEventData eventData)
    {
        Singleton<LevelEditorSelectionManager>.Instance.SetLibraryItemPointerDown(this._item);
    }

    // Token: 0x06004DC5 RID: 19909 RVA: 0x00017899 File Offset: 0x00015A99
    public void OnDrag(PointerEventData eventData)
    {
    }

    // Token: 0x06006047 RID: 24647
    private static string getSubdomain(string path)
    {
        string[] subDomains = path.Split(new char[]
        {
            '/'
        });
        string newDomain = "";
        for (int i = 0; i < subDomains.Length - 1; i++)
        {
            newDomain = newDomain + subDomains[i] + "/";
        }
        return newDomain;
    }

    // Token: 0x04003B3E RID: 15166
    public Text ItemName;

    // Token: 0x04003B3F RID: 15167
    public Image ItemBackground;

    // Token: 0x04003B40 RID: 15168
    public Image ItemPreviewImage;

    // Token: 0x04003B41 RID: 15169
    private LevelObjectEntry _item;

    // Token: 0x04003B42 RID: 15170
    private bool _isSelected;
}
