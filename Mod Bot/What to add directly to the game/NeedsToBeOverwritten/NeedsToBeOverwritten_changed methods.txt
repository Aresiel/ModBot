public partial class LibraryListItemDisplay : MonoBehaviour, IPointerUpHandler, IPointerDownHandler, IDragHandler, IEventSystemHandler
{
	// Token: 0x060059E0 RID: 23008 RVA: 0x001DD474 File Offset: 0x001DB674
	private Sprite PNGPathToSprite(string previewPathUnderResources)
    {
        Texture2D texture2D = new Texture2D(10, 10);
        if (previewPathUnderResources.StartsWith("modded/"))
        {
            string temp = previewPathUnderResources.Replace("modded/", "");
            byte[] data = File.ReadAllBytes(AssetLoader.GetSubdomain(Application.dataPath) + "mods/" + temp);
            texture2D.LoadImage(data);
        }
        else
        {
            texture2D = Resources.Load<Texture2D>(previewPathUnderResources.Replace(".png", string.Empty));
        }
        return Sprite.Create(texture2D, new Rect(0f, 0f, (float)texture2D.width, (float)texture2D.height), new Vector2(0.5f, 0.5f), 100f);
    }
}

LevelEnemySpawner
public List<Dropdown.OptionData> GetDropdownOptions(string fieldName)
{
    List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
    List<LevelObjectEntry> levelObjectsInLibrary = Singleton<LevelObjectsLibraryManager>.Instance.GetLevelObjectsInLibrary();
    for (int i = 0; i < levelObjectsInLibrary.Count; i++)
    {
        if (!levelObjectsInLibrary[i].PathUnderResources.StartsWith("modded/"))
        {
            LevelEnemySpawner component = Resources.Load<Transform>(levelObjectsInLibrary[i].PathUnderResources).GetComponent<LevelEnemySpawner>();
            if (component != null)
            {
                FirstPersonMover component2 = component.EnemyPrefab.GetComponent<FirstPersonMover>();
                if (component2 != null && component2.CanRideOthers())
                {
                    list.Add(new DropdownIntOptionData
                    {
                        text = levelObjectsInLibrary[i].DisplayName,
                        IntValue = (int)component2.CharacterType
                    });
                }
            }
        }
    }
    list.Sort((Dropdown.OptionData x, Dropdown.OptionData y) => x.text.CompareTo(y.text));
    list.Insert(0, new DropdownIntOptionData
    {
        text = "None",
        IntValue = 0
    });
    return list;
}

LevelEditorObjectPlacementManager
public ObjectPlacedInLevel PlaceObjectInLevelRoot(LevelObjectEntry objectPlacedLevelObjectEntry, Transform levelRoot)
	{
		Transform transform = null;
        if (objectPlacedLevelObjectEntry.PathUnderResources.StartsWith("modded/"))
        {
            string[] array = objectPlacedLevelObjectEntry.PathUnderResources.Split(new char[]
            {
                '/'
            });
            if (array.Length != 3)
            {
                Debug.LogError("'" + objectPlacedLevelObjectEntry.PathUnderResources + "' was not set up right! It needs to only have 2 '/'es");
            }
            try
            {
                transform = AssetLoader.GetObjectFromFile(array[1], array[2]).transform;
            }
            catch
            {
                Debug.LogError("You dont have the mod '" + array[1] + "' installed, please install this mod to use this level");
            }
        } else {
			transform = Resources.Load<Transform>(objectPlacedLevelObjectEntry.PathUnderResources);
		}
} // This is not the full method, the full method can be found in MethodsToInject

ProjectileManager
public ArrowProjectile CreateInactiveArrow(bool isOnFire)
	{
		Transform transform = this.ArrowPool.InstantiateNewObject(false);
		ArrowProjectile arrowProjectile = Singleton<CacheManager>.Instance.GetArrowProjectile(transform);
		arrowProjectile.SetFlamingVisuals(isOnFire);
		arrowProjectile.SetInactive();
		arrowProjectile.SetDamageTypeOverride(DamageSourceType.None);
		if (BoltNetwork.isServer)
		{
			this._nextArrowID++;
		}
		arrowProjectile.SetProjectileID(this._nextArrowID);
		ModsManager.Instance.passOnMod.OnProjectileCreated(arrowProjectile.gameObject);
		return arrowProjectile;
	}
public BulletProjectile CreateMortarShrapnel(Vector3 startPosition, Vector3 flyDirection, Character owner)
	{
		Transform transform = this.MortarExplosionShrapnelPool.InstantiateNewObject(false);
		BulletProjectile bulletProjectile = Singleton<CacheManager>.Instance.GetBulletProjectile(transform);
		ModsManager.Instance.passOnMod.OnProjectileCreated(bulletProjectile.gameObject);
		bulletProjectile.StartFlying(startPosition, flyDirection, false, owner);
		return bulletProjectile;
	}
public BulletProjectile CreateFlameBreathProjectile(Vector3 startPosition, Vector3 flyDirection, Character owner)
	{
		PooledPrefab pooledPrefab;
		if (owner.IsMainPlayer())
		{
			pooledPrefab = this.FlameBreathProjectilePool;
		}
		else
		{
			pooledPrefab = this.FlameBreathEnemyProjectilePool;
		}
		Transform transform = pooledPrefab.InstantiateNewObject(false);
		BulletProjectile bulletProjectile = Singleton<CacheManager>.Instance.GetBulletProjectile(transform);
		ModsManager.Instance.passOnMod.OnProjectileCreated(bulletProjectile.gameObject);
		bulletProjectile.StartFlying(startPosition, flyDirection, false, owner);
		return bulletProjectile;
	}
public BulletProjectile CreateRepairFlameProjectile(Vector3 startPosition, Vector3 flyDirection)
	{
		Transform transform = this.RepairFlameProjectilePool.InstantiateNewObject(false);
		BulletProjectile bulletProjectile = Singleton<CacheManager>.Instance.GetBulletProjectile(transform);
		Singleton<ModsManager>.Instance.passOnMod.OnProjectileCreated(bulletProjectile.gameObject);
		bulletProjectile.StartFlying(startPosition, flyDirection, false, null);
		return bulletProjectile;
	}

Projectile
public void OnEnvironmentCollided(bool playImpactVFX = true)
	{
		MethodsToInject.Projectile_OnEnvironmentCollided(this, playImpactVFX);
	}