GameFlowManager
    Start()
{
	StartupManager.OnStartUp();

}

public partial class LibraryListItemDisplay : MonoBehaviour, IPointerUpHandler, IPointerDownHandler, IDragHandler, IEventSystemHandler
{
	// Token: 0x060059E0 RID: 23008 RVA: 0x001DD474 File Offset: 0x001DB674
	private Sprite PNGPathToSprite(string previewPathUnderResources)
    {
        Texture2D texture2D = new Texture2D(10, 10);
        if (previewPathUnderResources.StartsWith("modded/"))
        {
            string temp = previewPathUnderResources.Replace("modded/", "");
            byte[] data = File.ReadAllBytes(LibraryListItemDisplay.getSubdomain(Application.dataPath) + "mods/" + temp);
            texture2D.LoadImage(data);
        }
        else
        {
            texture2D = Resources.Load<Texture2D>(previewPathUnderResources.Replace(".png", string.Empty));
        }
        return Sprite.Create(texture2D, new Rect(0f, 0f, (float)texture2D.width, (float)texture2D.height), new Vector2(0.5f, 0.5f), 100f);
    }
	private static string getSubdomain(string path)
    {
        string[] subDomains = path.Split(new char[]
        {
            '/'
        });
        string newDomain = "";
        for (int i = 0; i < subDomains.Length - 1; i++)
        {
            newDomain = newDomain + subDomains[i] + "/";
        }
        return newDomain;
    }



Firstpersonmover
    private new void Start()
{
    Singleton<ModsManager>.Instance.passOnMod.OnFirstPersonMoverSpawned(base.gameObject);
    base.Start();
}
Firstpersonmover
    void Update()
{
    ModsManager.Instance.passOnMod.OnFirstPersonMoverUpdate(gameObject);
}
Firstpersonmover
public void RefreshUpgrades()
	{
		if (!base.IsAlive() || this._characterModel == null)
		{
			return;
		}
		ModsManager.Instance.passOnMod.OnUpgradesRefreshed(gameObject,this._upgradeCollection);
	}


LevelEditorUI
Show()
{
    Singleton<ModsManager>.Instance.passOnMod.OnLevelEditorStarted();
}

ObjectPlacedInLevel
Initialize()
{
    Singleton<ModsManager>.Instance.passOnMod.OnObjectPlacedInLevelEditor(base.gameObject);
}

LevelEnemySpawner
public List<Dropdown.OptionData> GetDropdownOptions(string fieldName)
{
    List<Dropdown.OptionData> list = new List<Dropdown.OptionData>();
    List<LevelObjectEntry> levelObjectsInLibrary = Singleton<LevelObjectsLibraryManager>.Instance.GetLevelObjectsInLibrary();
    for (int i = 0; i < levelObjectsInLibrary.Count; i++)
    {
        if (!levelObjectsInLibrary[i].PathUnderResources.StartsWith("modded/"))
        {
            LevelEnemySpawner component = Resources.Load<Transform>(levelObjectsInLibrary[i].PathUnderResources).GetComponent<LevelEnemySpawner>();
            if (component != null)
            {
                FirstPersonMover component2 = component.EnemyPrefab.GetComponent<FirstPersonMover>();
                if (component2 != null && component2.CanRideOthers())
                {
                    list.Add(new DropdownIntOptionData
                    {
                        text = levelObjectsInLibrary[i].DisplayName,
                        IntValue = (int)component2.CharacterType
                    });
                }
            }
        }
    }
    list.Sort((Dropdown.OptionData x, Dropdown.OptionData y) => x.text.CompareTo(y.text));
    list.Insert(0, new DropdownIntOptionData
    {
        text = "None",
        IntValue = 0
    });
    return list;
}

LevelEditorObjectPlacementManager
public ObjectPlacedInLevel PlaceObjectInLevelRoot(LevelObjectEntry objectPlacedLevelObjectEntry, Transform levelRoot)
	{
		Transform transform = null;
        if (objectPlacedLevelObjectEntry.PathUnderResources.StartsWith("modded/"))
        {
            string[] array = objectPlacedLevelObjectEntry.PathUnderResources.Split(new char[]
            {
                '/'
            });
            if (array.Length != 3)
            {
                Debug.LogError("'" + objectPlacedLevelObjectEntry.PathUnderResources + "' was not set up right! It needs to only have 2 '/'es");
            }
            try
            {
                transform = AssetLoader.getObjectFromFile(array[1], array[2]).transform;
            }
            catch
            {
                Debug.LogError("You dont have the mod '" + array[1] + "* installed, please install this mod to use this level");
            }
        } else {
			transform = Resources.Load<Transform>(objectPlacedLevelObjectEntry.PathUnderResources);
		}
}

Character
protected virtual void Awake()
	{
		this._moddedDeathListeners = new List<fakeAction>();
	}

Character
	protected virtual void Start()
	{
		ModsManager.Instance.passOnMod.OnCharacterSpawned(gameObject);
	}
Character
	protected virtual void Update()
	{
		ModsManager.Instance.passOnMod.OnCharacterUpdate(gameObject);
	}
Character
	protected virtual void onDeath(Character killer, DamageSourceType damageSourceType)
	for (int j = 0; j < this._moddedDeathListeners.Count; j++)
		{
			this._moddedDeathListeners[j].Invoke();
		}
		this._moddedDeathListeners.Clear();

UpgradeDescription
	public int GetSkillPointCost()
	{
		if (GameModeManager.UsesBattleRoyaleUpgradeCosts() && this.SkillPointCostBattleRoyale > 0)
		{
			return this.SkillPointCostBattleRoyale;
		}
		if (GameModeManager.UsesMultiplayerUpgrades())
		{
			return this.SkillPointCostMultiplayer;
		}
		return UpgradeCosts.GetCostOfUpgrade(this.UpgradeType, this.Level);
	}

UpgradeDescription
	public virtual bool IsUpgradeCurrentlyVisible()
	{
		if (!UpgradePagesMangaer.GetUpgradePages(this.UpgradeType,this.Level).Contains(UpgradePagesMangaer.currentPage)) {
			return false;
		}
	}