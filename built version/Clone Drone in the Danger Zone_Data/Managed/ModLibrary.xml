<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModLibrary</name>
    </assembly>
    <members>
        <member name="T:ModLibrary.Accessor">
            <summary>
            Used to get / set / call private values and methods on objects
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.InstanceType">
            <summary>
            The <see cref="T:System.Type"/> that defines the members that can be accessed
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.Instance">
            <summary>
            The instance of the <see cref="T:System.Type"/> to get members from
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.Flags">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used to access members
            </summary>
        </member>
        <member name="M:ModLibrary.Accessor.#ctor(System.Type,System.Object)">
            <summary>
            Defines a new instance of the <see cref="T:ModLibrary.Accessor"/> class
            </summary>
            <param name="_type">The declaring <see cref="T:System.Type"/> that defines the members that should be accessed</param>
            <param name="_instance">The instance of the given <see cref="T:System.Type"/> to get members from</param>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.String,System.Object[])">
            <summary>
            Calls a private method in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <param name="methodName">The name of the method to call, case-sensitive</param>
            <param name="args">The arguments to pass to the method, <see langword="null"/> for no arguments</param>
            <returns>The return value of the method</returns>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.String,System.Object[])">
            <summary>
            Calls a private method in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <typeparam name="ReturnType">The <see cref="T:System.Type"/> to cast the method's return value to</typeparam>
            <param name="methodName">The name of the method to call, case-sensitive</param>
            <param name="args">The arguments to pass to the method, <see langword="null"/> for no arguments</param>
            <returns>The return value of the method casted to <typeparamref name="ReturnType"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField(System.String,System.Object)">
            <summary>
            Sets a private field in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <param name="fieldName">The name of the field to set, case-sensitive</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField``1(System.String,``0)">
            <summary>
            Sets a private field in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <typeparam name="FieldType">The <see cref="T:System.Type"/> of the field</typeparam>
            <param name="fieldName">The name of the field to set, case-sensitive</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField(System.String)">
            <summary>
            Gets a private field's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <param name="fieldName">The name of the field to get, case-sensitive</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``1(System.String)">
            <summary>
            Gets a private field's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <typeparam name="FieldType">The <see cref="T:System.Type"/> of the field</typeparam>
            <param name="fieldName">The name of the field to get, case-sensitive</param>
            <returns>The value of the field casted to <typeparamref name="FieldType"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.String,System.Object)">
            <summary>
            Sets a private property in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <param name="propertyName">The name of the property, case-sensitive</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``1(System.String,``0)">
            <summary>
            Sets a private property in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <typeparam name="PropertyType">The <see cref="T:System.Type"/> of the property</typeparam>
            <param name="propertyName">The name of the property, case-sensitive</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty(System.String)">
            <summary>
            Gets a private property's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <param name="propertyName">The name of the property to get the value of, case-sensitive</param>
            <returns>The value of the proerty</returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.String)">
            <summary>
            Gets a private property's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <typeparam name="PropertyType">The <see cref="T:System.Type"/> of the property</typeparam>
            <param name="propertyName">The name of the property to get the value of, case-sensitive</param>
            <returns>The value of the proerty casted to <typeparamref name="PropertyType"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Calls a method even if its private
            </summary>
            <param name="type">The type that the method is in. (Get this by typing "<see langword="typeof"/>(Class)" where "Class" is the <see langword="class"/> where the method you want to run is located).</param>
            <param name="methodName">The name of the method, case sensitive.</param>
            <param name="instance">The object that the method is attached to.</param>
            <param name="args">The arguments you want to pass in, if left empty no arguments will be called. Defined like this: <see langword="new object"/>[] { arg1, arg2, arg3 } </param>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``2(System.String,``0,System.Object[])">
            <summary>
            Calls a method even if its private and returns its return value.
            </summary>
            <typeparam name="InstanceType">The type of the class the method is in.</typeparam>
            <typeparam name="ReturnType">The return type of the method.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="instance">The instance of the class you want to call the method in.</param>
            <param name="args">The arguments to pass to the method.</param>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.String,``0,System.Object[])">
            <summary>
            Calls a method even if its private but does not return its return value. (Use only for methods that have no return value or you dont need it)
            </summary>
            <typeparam name="InstanceType">The type of the class the method is in.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="instance">The instance of the class you want to call the method in.</param>
            <param name="args">The arguments to pass to the method.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets field value even if its private.
            </summary>
            <param name="type">The type that the field is in. (Get this by typing "typeof(Class)" where Class is the class where the method you want to run is located).</param>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The object that the field is attached to.</param>
            <param name="value">The value that the field should be set to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField``2(System.String,``0,``1)">
            <summary>
            Sets field value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the class the field is in.</typeparam>
            <typeparam name="FieldType">The type of the field.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The instance of the class the field is in.</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField(System.Type,System.String,System.Object)">
            <summary>
            Gets field value even if its private.
            </summary>
            <param name="type">The type that the field is in. (Get this by typing "typeof(Class)" where Class is the class where the method you want to run is located).</param>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The object that the field is attached to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``2(System.String,``0)">
            <summary>
            Gets field value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the class the field is in.</typeparam>
            <typeparam name="FieldType">The type of the field.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The instance the field is in.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets property value even if its private.
            </summary>
            <param name="type">The type that the property is in. (Get this by typing "typeof(Class)" where Class is the class where the method you want to run is located).</param>
            <param name="propertyName">The name of the Property.</param>
            <param name="instance">The object that the property is attached to.</param>
            <param name="value">The value the property should be set to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``2(System.String,``0,``1)">
            <summary>
            Sets property value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the class the property is in.</typeparam>
            <typeparam name="PropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="instance">The instance the property is in.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty(System.Type,System.String,System.Object)">
            <summary>
            Sets property value even if its private.
            </summary>
            <param name="type">The type that the property is in. (Get this by typing "typeof(Class)" where Class is the class where the mathod you want to run is located).</param>
            <param name="propertyName">The name of the Property.</param>
            <param name="instance">The object that the property is attached to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``2(System.String,``0)">
            <summary>
            Sets property value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the clas the property is in.</typeparam>
            <typeparam name="PropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="instance">The instance the property is in.</param>
        </member>
        <member name="T:ModLibrary.AssetLoader">
            <summary>
            Used to load assets from assetbundles (normally placed in the mods folder)
            </summary>
        </member>
        <member name="F:ModLibrary.AssetLoader.ModsFolderName">
            <summary>
            The name of the folder where mods are stored
            </summary>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetModsFolderDirectory">
            <summary>
            Returns the full directory to the mods folder directory where we expect most of the assetbundles to be
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile(System.String,System.String)">
            <summary>
            Gets a <see cref="T:UnityEngine.GameObject"/> from an asset bundle
            </summary>
            <param name="assetBundleName">The name of the asset bundle file (Must be located in the 'mods' folder for this method)</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile(System.String,System.String,System.String)">
            <summary>
            Gets a <see cref="T:UnityEngine.GameObject"/> from an asset bundle
            </summary>
            <param name="assetBundleName">The name of the asset bundle file</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <param name="customPath">The custom path of the asset bundle, starts from the 'Clone Drone in the Danger Zone' folder</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile``1(System.String,System.String)">
            <summary>
            Gets an Object of type <typeparamref name="T"/> from an asset bundle
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="assetBundleName">The name of the asset bundle file</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile``1(System.String,System.String,System.String)">
            <summary>
            Gets an Object of type <typeparamref name="T"/> from an assetbundle
            </summary>
            <typeparam name="T">The type of the object in the assetbundle</typeparam>
            <param name="assetBundleName">The name of the assetbundle file</param>
            <param name="objectName">The name of the object you want to get from the assetbundle</param>
            <param name="customPath">The custom path where the assetbundle is located (goes from <seealso cref="P:UnityEngine.Application.dataPath"/>)</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.TrySaveFileToMods(System.String,System.String)">
            <summary>Tries to save the file from the specified directory, (will not save file if one with the same already exists)</summary>
            <param name="url">The URL to download the file from.</param>
            <param name="name">The name of the file that will be created.</param>
        </member>
        <member name="M:ModLibrary.AssetLoader.SaveFileToMods(System.String,System.String)">
            <param name="url">The URL to download the file from.</param>
            <param name="name">The name of the file that will be created.</param>
        </member>
        <member name="M:ModLibrary.AssetLoader.ClearCache">
            <summary>
            Clears the cache for loaded assets
            </summary>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetSubdomain(System.String)">
            <summary>
            Gets the directory 1 step under a spesific directory
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.ExtensionMethods">
            <summary>
            Dont call these methods directly from here
            </summary>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.GetObject``1(ModdedObject,System.Int32)">
            <summary>
            Instead of having to filter the object array yourself you can use this method to get the object at a specific index in a much safer way
            </summary>
            <typeparam name="T">The type of the object at the index</typeparam>
            <param name="moddedObject"></param>
            <param name="index">The index of the object you want to get</param>
            <returns>The object you asked for</returns>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.SetIconFromURL(UpgradeDescription,System.String)">
            <summary>
            Sets the icon of the upgrade to a image from a url, this needs a internet connection (NOTE: this has a cache so if you want to change picture you might want to remove the cache in the mods directory)
            </summary>
            <param name="upgradeDescription"></param>
            <param name="url">the url of the image you want to set the object to</param>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.GetModdedSettingsStringValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets the settings saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The mod you opend the window as</param>
            <param name="name">the name you gave the setting</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.GetModdedSettingsBoolValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets the settings saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The mod you opend the window as</param>
            <param name="name">the name you gave the setting</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.GetModdedSettingsFloatValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets the settings saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The mod you opend the window as</param>
            <param name="name">the name you gave the setting</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.GetModdedSettingsIntValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets the settings saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The mod you opend the window as</param>
            <param name="name">the name you gave the setting</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ExtensionMethods.IsModEnabled(ModLibrary.Mod)">
            <summary>
            Returns true of the mod is enbaled, false if its disabled
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.debug">
            <summary>
            Allows you to write to the in-game console (open it with F1).
            </summary>
        </member>
        <member name="M:ModLibrary.debug.Log(System.String)">
            <summary>
            Writes to the in-game console.
            </summary>
            <param name="_log">What to write</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.Object)">
            <summary>
            Writes the given object's ToString() value to the console
            </summary>
            <param name="_log">The object to write</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.String,UnityEngine.Color)">
            <summary>
            Writes to the in-game console, in color.
            </summary>
            <param name="_log">What to write</param>
            <param name="_color">The color to write in</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Passes every instance of the given list's 'ToString()' value to 'debug.Log()'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:ModLibrary.debug.PrintAll``1(System.Collections.Generic.IEnumerable{``0},UnityEngine.Color)">
            <summary>
            Passes every instance of the given list's 'ToString()' value to: 'debug.Log()'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="color"></param>
        </member>
        <member name="M:ModLibrary.debug.PrintAllChildren(UnityEngine.Transform)">
            <summary>
            Opens a notepad window with info about the passed transfrom like components and children
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:ModLibrary.FirebaseAccessor">
            <summary>
            Used to get values from a firebase
            </summary>
        </member>
        <member name="M:ModLibrary.FirebaseAccessor.ReadFromFirebaseURL(System.String)">
            <summary>
            Gets a value from firebase (Do not use in main thread) (Removes all '"' characters)
            </summary>
            <param name="URLToRead"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.CustomUpgradeManager">
            <summary>
            Used by Mod-Bot to handle the custom upgrade pages. (Does things like handle the next and back buttons)
            </summary>
        </member>
        <member name="M:ModLibrary.CustomUpgradeManager.BackClicked">
            <summary>
            Should be called when the back button is clicked on the UI.
            </summary>
        </member>
        <member name="M:ModLibrary.CustomUpgradeManager.NextClicked">
            <summary>
            Should be called when the next button is clicked on the UI.
            </summary>
        </member>
        <member name="T:ModLibrary.UpgradeExtensionMethods">
            <summary>
            Used to implement Extension methods for upgrades, dont call these directly from this class.
            </summary>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.AddUpgrade(UpgradeManager,UpgradeDescription,ModLibrary.Mod)">
            <summary>
            Adds a upgrade to the page of the specified mod, if the upgrade is a modded upgrade it will also be added to the upgradeManager.UpgradeDescriptions list
            </summary>
            <param name="upgradeManager"></param>
            <param name="upgrade"></param>
            <param name="mod"></param>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.IsModdedUpgradeType(UpgradeDescription)">
            <summary>
            Checks if the upgrade is a modded upgrade
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.SetSingleplayerCost(UpgradeDescription,System.Int32,ModLibrary.Mod)">
            <summary>
            Sets the cost of the upgrade in singleplayer (Endless, Twichmode, storymode ect)
            </summary>
            <param name="upgradeDescription"></param>
            <param name="cost"></param>
            <param name="mod"></param>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.GetSinglePlayerCost(UpgradeDescription)">
            <summary>
            Gets the cost set by SetSingleplayerCost
            </summary>
            <param name="upgradeDescription"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.Mod">
            <summary>
            Base class for all mods, contains virtual implementations for diffrent events in the game.
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnFirstPersonMoverSpawned(FirstPersonMover)">
            <summary>
            Called in <see cref="T:Character"/>.Start()
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> that was spawned</param>
        </member>
        <member name="M:ModLibrary.Mod.OnFirstPersonMoverUpdate(FirstPersonMover)">
            <summary>
            Called in <see cref="T:Character"/>.Update()
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> that was updated</param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterSpawned(Character)">
            <summary>
            Called in <see cref="T:Character"/>.Start()
            </summary>
            <param name="character">The <see cref="T:Character"/> that was spawned</param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterUpdate(Character)">
            <summary>
            Called in <see cref="T:Character"/>.Update()
            </summary>
            <param name="character">The <see cref="T:Character"/> that was updated</param>
        </member>
        <member name="M:ModLibrary.Mod.OnModRefreshed">
            <summary>
            Called in <see cref="T:InternalModBot.ModsManager"/>.ReloadMods()
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnLevelEditorStarted">
            <summary>
            Called when the level editor is started.
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnCommandRan(System.String)">
            <summary>
            Called when you run a command in the console (mostly for debuging).
            </summary>
            <param name="command">The text entered into the command field of the console</param>
        </member>
        <member name="M:ModLibrary.Mod.GetModName">
            <summary>
            Returns the name of the mod, override to set the name of you mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GetUniqueID">
            <summary>
            Returns a unique ID for every mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GetModDescription">
            <summary>
            Returns the description of the mod, override to change the description of your mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GetModImageURL">
            <summary>
            Returns the url to the image to be displayed in the mods menu, override to set a custom image for your mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.OnUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Called at the start <see cref="T:FirstPersonMover"/>.RefreshUpgrades()
            </summary>
            <param name="owner"></param>
            <param name="upgrades">The <see cref="T:UpgradeCollection"/> on the <see cref="T:FirstPersonMover"/> object</param>
        </member>
        <member name="M:ModLibrary.Mod.AfterUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Called at the end of <see cref="T:FirstPersonMover"/>.RefreshUpgrades()
            </summary>
            <param name="owner"></param>
            <param name="upgrades">The <see cref="T:UpgradeCollection"/> on the <see cref="T:FirstPersonMover"/> object</param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileCreated(Projectile)">
            <summary>
            Called when a <see cref="T:Projectile"/> is created
            </summary>
            <param name="projectile">6</param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileStartedMoving(Projectile)">
            <summary>
            Called when a <see cref="T:Projectile"/> starts moving
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileUpdate(Projectile)">
            <summary>
            Called every frame since the given <see cref="T:Projectile"/> was created
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileDestroyed(Projectile)">
            <summary>
            Called when the given <see cref="T:Projectile"/> is destroyed in any way
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileCreated(ArrowProjectile)">
            <summary>
            Called when an <see cref="T:ArrowProjectile"/> is created
            </summary>
            <param name="arrow">The created <see cref="T:ArrowProjectile"/></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileStartedMoving(ArrowProjectile)">
            <summary>
            Called when an <see cref="T:ArrowProjectile"/> starts moving
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileUpdate(ArrowProjectile)">
            <summary>
            Called every frame since the given <see cref="T:ArrowProjectile"/> was created
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileDestroyed(ArrowProjectile)">
            <summary>
            Called when the given <see cref="T:ArrowProjectile"/> is destroyed in any way
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileCreated(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when a <see cref="T:BulletProjectile"/> is created
            </summary>
            <param name="bullet">The created <see cref="T:BulletProjectile"/></param>
            <param name="isFlameBreath"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileStartedMoving(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when a <see cref="T:BulletProjectile"/> starts moving
            </summary>
            <param name="bullet"></param>
            <param name="isRepairFire"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileUpdate(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called every frame since the given <see cref="T:BulletProjectile"/> was created
            </summary>
            <param name="bullet"></param>
            <param name="isFlameBreath"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileDestroyed(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when the given <see cref="T:BulletProjectile"/> is destroyed in any way
            </summary>
            <param name="bullet"></param>
            <param name="isRepairFire"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterKilled(Character,Character,DamageSourceType)">
            <summary>
            Called when a <see cref="T:Character"/> is killed
            </summary>
            <param name="killedCharacter">The <see cref="T:Character"/> that was killed</param>
            <param name="killerCharacter">The killer <see cref="T:Character"/></param>
            <param name="damageSourceType">The cause of death</param>
        </member>
        <member name="M:ModLibrary.Mod.OnModDeactivated">
            <summary>
            Called when the mod is deactivated from the mods menu
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.ImplementsSettingsWindow">
            <summary>
            If this returns true it will active the mod settings button in the mods window for this mod.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.CreateSettingsWindow(ModLibrary.ModOptionsWindowBuilder)">
            <summary>
            Gets called when the user clicks on the mod settings button in the mods window. Allows you to create a neat little UI that saves the values for you. Get the values set by this with SettingsManager.Instance.GetModdedSettingsBoolValue, GetModdedSettingsStringValue, GetModdedSettingsIntValue and GetModdedSettingsFloatValue
            </summary>
            <param name="builder">The object used to build the UI.</param>
        </member>
        <member name="M:ModLibrary.Mod.ShouldCursorBeEnabled">
            <summary>
            If this returns true the cursor will get enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GlobalUpdate">
            <summary>
            Called every frame
            </summary>
        </member>
        <member name="T:ModLibrary.ModOptionsWindowBuilder">
            <summary>
            Used to place all of the options in the options window
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddSlider(System.Single,System.Single,System.Single,System.String,System.Action{System.Single})">
            <summary>
            Adds a slider, note that the value of the slider will be saved by Mod-Bot so you dont need to save it in a ny way
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">The maximum value of the slider</param>
            <param name="defaultValue">The value the slider will be set to before it is changed by the user</param>
            <param name="name">The name of the slider, this will both be displayed to the user and used in the mod to get the value (no 2 names should EVER be the same)</param>
            <param name="onChange">A callback that gets called when the slider gets changed, if null wont do anything</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddIntSlider(System.Int32,System.Int32,System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            Adds a slider to the options window that can only be whole numbers
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">That maximum value of the slider</param>
            <param name="defaultValue">The value the slider will be set to before it is changed by the user</param>
            <param name="name">Both the display name in the list and used by you to get the value (no 2 names should EVER be the same)</param>
            <param name="onChange">Called when the value is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddCheckbox(System.Boolean,System.String,System.Action{System.Boolean})">
            <summary>
            Adds a checkbox to the mods window
            </summary>
            <param name="defaultValue">The value the checkbox will be set to before the user changes it</param>
            <param name="name">Both the display name of the checkbox and what you use to get the value of the checkbox (no 2 names should EVER be the same)</param>
            <param name="onChange">Called when the value of the checkbox is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddInputField(System.String,System.String,System.Action{System.String})">
            <summary>
            Adds a input field to the mods window
            </summary>
            <param name="defaultValue">The defualt value before it is edited by the user</param>
            <param name="name">Name used both as a display name and as a key for you to get the value by later (no 2 names should EVER be the same)</param>
            <param name="onChange">Gets called when the value of the inputField gets changed, if null doesnt nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddDropdown(System.String[],System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            Adds a dropdown to the mods window
            </summary>
            <param name="options">The diffrent options that should be selectable</param>
            <param name="defaultIndex">what index in the previus array will be selected before the user edits it</param>
            <param name="name">Display name and key for you later (no 2 names should EVER be the same)</param>
            <param name="onChange">Gets called when the value of the dropdown is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddDropDown``1(System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            Adds a dropdown to the options window
            </summary>
            <typeparam name="T">Must be a enum, the options of this enum will be displayed as the options of the dropdown</typeparam>
            <param name="defaultIndex">The index in the enum that will be selected before the user edits it</param>
            <param name="name">Display name and key to get value (no 2 names should EVER be the same)</param>
            <param name="onChange"></param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddButton(System.String,UnityEngine.Events.UnityAction)">
            <summary>
            Adds a button to the options window
            </summary>
            <param name="text">The text displayed on the button</param>
            <param name="callback">Called when the user clicks the button</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddLabel(System.String)">
            <summary>
            Adds a plain text to the options window
            </summary>
            <param name="text">string that will be displayed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.CloseWindow">
            <summary>
            Closes the options window, this also opens its parent window (probably the mods window)
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.ForceCloseWindow">
            <summary>
            Closes the options window, does NOT open the parent window
            </summary>
        </member>
        <member name="T:ModLibrary.ModTools.EnumTools">
            <summary>
            General tools to help you when working with enums!
            </summary>
        </member>
        <member name="M:ModLibrary.ModTools.EnumTools.GetName``1(``0)">
            <summary>
            Gets the name of the given value in an <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If value is <see langword="null"/> or <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T">The type of <see langword="enum"/> to get the name from</typeparam>
            <param name="value">The value assigned to an entry in the specified <see langword="enum"/></param>
            <returns>The name of the entry with the value <paramref name="value"/></returns>
        </member>
        <member name="M:ModLibrary.ModTools.EnumTools.GetNames``1">
            <summary>
            Gets all names in the given <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModTools.EnumTools.GetValues``1">
            <summary>
            Gets all values of an <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.ModTools.Vector3Tools">
            <summary>
            General tools to help you when working with Vector3s
            </summary>
        </member>
        <member name="M:ModLibrary.ModTools.Vector3Tools.GetDirection(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets a direction from one <see cref="T:UnityEngine.Vector3"/> to another
            </summary>
            <param name="StartPoint">The position to go from</param>
            <param name="Destination">The position to go to</param>
            <returns>The direction between the two points</returns>
        </member>
        <member name="T:ModLibrary.ModToolExtensionMethods">
            <summary>
            Extention methods implemented by mod tools, don't call these directly.
            </summary>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetAllEnemyCharactersInRange(CharacterTracker,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all enemy <see cref="T:Character"/>s in the specified range
            </summary>
            <param name="characterTracker"></param>
            <param name="origin">The point to calculate the distance from</param>
            <param name="radius">The radius to get all enemy <see cref="T:Character"/>s within</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetAllCharactersInRange(CharacterTracker,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all <see cref="T:Character"/>s in the specified range
            </summary>
            <param name="characterTracker"></param>
            <param name="origin">The point to calculate the distance from</param>
            <param name="radius">The radius to get all <see cref="T:Character"/>s within</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.IsUpgradeTypeAndLevelUsed(UpgradeManager,UpgradeType,System.Int32)">
            <summary>
            Checks whether or not the given <see cref="T:UpgradeType"/> and level is already in use by an <see cref="T:UpgradeDescription"/>
            </summary>
            <param name="upgradeManager"></param>
            <param name="ID">The ID of the upgrade</param>
            <param name="Level"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GiveUpgrade(FirstPersonMover,UpgradeDescription)">
            <summary>
            Gives the specified <see cref="T:UpgradeDescription"/> to a <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover">The player to target</param>
            <param name="Upgrade">the upgrade to give to the player</param>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBodyPart(Character,MechBodyPartType)">
            <summary>
            Gets the first found <see cref="T:MechBodyPart"/> of the given <see cref="T:MechBodyPartType"/> (Returns <see langword="null"/> if the given <see cref="T:Character"/> does not have the specified <see cref="T:MechBodyPartType"/>)
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBodyParts(Character,MechBodyPartType)">
            <summary>
            Gets all <see cref="T:MechBodyPart"/>s of the given <see cref="T:MechBodyPartType"/>
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes the order of elements in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns>The randomized collection</returns>
        </member>
        <member name="T:InternalModBot.CalledFromInjections">
            <summary>
            Contains a lot of methods that get called from injections into the game itself
            </summary>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromRefreshUpgradesStart(FirstPersonMover)">
            <summary>
            Called From RefreshUpgrade at the start of the method
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromRefreshUpgradesEnd(FirstPersonMover)">
            <summary>
            Called after upgrades get refreshed
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnCharacterStart(Character)">
            <summary>
            Gets called in character Start
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnCharacterUpdate(Character)">
            <summary>
            Gets called in character Update
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnCharacterDeath(Character,Character,DamageSourceType)">
            <summary>
            Called from OnDeath in Character
            </summary>
            <param name="owner"></param>
            <param name="killer"></param>
            <param name="damageSource"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromGetSkillPointCost(UpgradeDescription)">
            <summary>
            Called from GetSkillPointCost and the number this returns will be the cost of the upgrade
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromIsUpgradeCurrentlyVisible(UpgradeDescription)">
            <summary>
            Called from IsUpgradeCurrentlyVisible and if this returns false the upgrade will not be displayed, and if it returns true it will
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromIsRepairUpgradeCurrentlyVisible(UpgradeDescription)">
            <summary>
            Called from the repair upgrade, does the same thing as FromIsUpgradeCurrentlyVisible but since repair overrides IsUpgradeCurrentlyVisible we need another function to handle it
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromSetInactive(Projectile)">
            <summary>
            Called when a projectile is created
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromStartFlying(Projectile)">
            <summary>
            Called when a arrow starts flying
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromDestroyProjectile(Projectile)">
            <summary>
            Called when a projectile gets destroyed
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnEnvironmentCollided(Projectile)">
            <summary>
            Gets called when a projectile collides with the enviorment
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromRefreshCursorEnabled">
            <summary>
            If this method returns true the cursor will be enabled and the player will not be able to move
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromGetPositionForAIToAimAt(Character)">
            <summary>
            Gets called from character GetPositionForAIToAimAt and is used to fix people aiming at spidertrons
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.FixSpidertrons">
            <summary>
            used to fix spidertrons
            </summary>
        </member>
        <member name="M:InternalModBot.FixSpidertrons.GetPositionForAIToAimAt">
            <summary>
            used by the injector to copy the msil from and paste it into the real function
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.Logger">
            <summary>
            Used by Mod-Bot as the low level level of the debug console system
            </summary>
        </member>
        <member name="M:InternalModBot.Logger.Log(System.String)">
            <summary>
            Writes the specified text to the console
            </summary>
            <param name="whatToLog"></param>
        </member>
        <member name="M:InternalModBot.Logger.Log(System.String,UnityEngine.Color)">
            <summary>
            Writes the specified text to the console, now in color!
            </summary>
            <param name="whatToLog"></param>
            <param name="color"></param>
        </member>
        <member name="M:InternalModBot.Logger.RunCommand(System.String)">
            <summary>
            Gets called when the user types in a command into the input field and presses enter
            </summary>
            <param name="command"></param>
        </member>
        <member name="F:InternalModBot.Logger.animator">
            <summary>
            The animator containing the animations for opening and closeing the console
            </summary>
        </member>
        <member name="F:InternalModBot.Logger.LogText">
            <summary>
            The complete text of the console
            </summary>
        </member>
        <member name="F:InternalModBot.Logger.Container">
            <summary>
            The GameObject thats holding the console
            </summary>
        </member>
        <member name="F:InternalModBot.Logger.input">
            <summary>
            the input field that commands are typed into
            </summary>
        </member>
        <member name="T:InternalModBot.ConsoleInputManager">
            <summary>
            Used by mod-bot to define some commands that already exist without any extra mods
            </summary>
        </member>
        <member name="M:InternalModBot.ConsoleInputManager.OnCommandRan(System.String)">
            <summary>
            The same as OnCommandRan on mods, but called in mod-bot
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:InternalModBot.ConsoleInputManager.Crash">
            <summary>
            Crashes the game, called when someone enters the command "crash"
            </summary>
        </member>
        <member name="T:InternalModBot.IgnoreCrashesManager">
            <summary>
            Used by Mod-Bot to ignore crashes when the ignoreallcrashes command is active
            </summary>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.Start">
            <summary>
            Starts ignoring crashes if we are currently configuerd to
            </summary>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.SetIsIgnoringCrashes(System.Boolean)">
            <summary>
            Sets if we should ignore crashes
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.GetIsIgnoringCrashes">
            <summary>
            Gets if we are currently ignoreing crashes
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.DoubleValueHolder`2">
            <summary>
            Used to hold 2 values in 1 object
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.#ctor(`0,`1)">
            <summary>
            Sets the first value to the first argument and the second value to the second argument
            </summary>
            <param name="_first"></param>
            <param name="_second"></param>
        </member>
        <member name="F:InternalModBot.DoubleValueHolder`2.FirstValue">
            <summary>
            The first value held by this object
            </summary>
        </member>
        <member name="F:InternalModBot.DoubleValueHolder`2.SecondValue">
            <summary>
            The second value held by this object
            </summary>
        </member>
        <member name="T:InternalModBot.ErrorChanger">
            <summary>
            Used by Mod-Bot to change the error on the error screen when the game crashes
            </summary>
        </member>
        <member name="M:InternalModBot.ErrorChanger.ChangeError">
            <summary>
            Changes the error on the crash screen so that it no longer says to tell doborog of crashes
            </summary>
        </member>
        <member name="T:InternalModBot.FPSCount">
            <summary>
            Controls the FPS counter in the corner of the screen
            </summary>
        </member>
        <member name="F:InternalModBot.FPSCount.counter">
            <summary>
            The text that displays the numbers
            </summary>
        </member>
        <member name="T:InternalModBot.StartupManager">
            <summary>
            Used to start Mod-Bot when the game starts
            </summary>
        </member>
        <member name="M:InternalModBot.StartupManager.OnStartUp">
            <summary>
            Sets up mod-bot in general, called on game start
            </summary>
        </member>
        <member name="T:InternalModBot.ModSuggestingManager">
            <summary>
            Used by mod-bot to control the twich mode part of mod-bot
            </summary>
        </member>
        <member name="M:InternalModBot.ModSuggestingManager.ShowNextInSuggestedModsQueue">
            <summary>
            Shows the next in the suggested mods queue
            </summary>
        </member>
        <member name="M:InternalModBot.ModSuggestingManager.OnTwitchChatMessage(TwitchChatter.TwitchChatMessage@)">
            <summary>
            Gets called whenever anyone in twich chat sends a message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="F:InternalModBot.ModSuggestingManager.ModSuggestionAnimator">
            <summary>
            The animator that plays the slide in and out animation
            </summary>
        </member>
        <member name="F:InternalModBot.ModSuggestingManager.ModName">
            <summary>
            Text text display where the name of the mod to download should be
            </summary>
        </member>
        <member name="F:InternalModBot.ModSuggestingManager.CreatorName">
            <summary>
            The text display where the name of the creator of the mod should be displayed
            </summary>
        </member>
        <member name="T:InternalModBot.ModdedUpgradeTypeAndLevel">
            <summary>
            Used to represent  both a UpgradeType and a level (int) in Mod-Bot (the == and != operators compare the contents and not the references)
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeTypeAndLevel.#ctor(UpgradeType,System.Int32)">
            <summary>
            Constructor, will put the inputs supplied into the values that the object holds
            </summary>
            <param name="type"></param>
            <param name="level"></param>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeTypeAndLevel.op_Equality(InternalModBot.ModdedUpgradeTypeAndLevel,InternalModBot.ModdedUpgradeTypeAndLevel)">
            <summary>
            compares a and b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeTypeAndLevel.op_Inequality(InternalModBot.ModdedUpgradeTypeAndLevel,InternalModBot.ModdedUpgradeTypeAndLevel)">
            <summary>
            Compares a and b, but in inverse
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeTypeAndLevel.Equals(System.Object)">
            <summary>
            Compares the input with the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeTypeAndLevel.GetHashCode">
            <summary>
            Gets the Hash Code for the current object
            </summary>
            <returns></returns>
        </member>
        <member name="F:InternalModBot.ModdedUpgradeTypeAndLevel.UpgradeType">
            <summary>
            The UpgradeType the object holds.
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedUpgradeTypeAndLevel.Level">
            <summary>
            The level the object holds
            </summary>
        </member>
        <member name="T:InternalModBot.UpgradeCosts">
            <summary>
            Used to manage the cost of upgrades in singleplayer since doborog doesnt have a built in system to do this.
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradeCosts.GetCostOfUpgrade(UpgradeType,System.Int32)">
            <summary>
            Gets the cost of the inputed upgrade type and level acording to the system.
            </summary>
            <param name="upgradeType"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradeCosts.SetCostOfUpgrade(UpgradeType,System.Int32,System.Int32,ModLibrary.Mod)">
            <summary>
            Sets the cost of the upgrade in the system
            </summary>
            <param name="upgradeType"></param>
            <param name="level"></param>
            <param name="newCost"></param>
            <param name="mod">The mod you set this from</param>
        </member>
        <member name="M:InternalModBot.UpgradeCosts.Reset">
            <summary>
            Removes all set custom upgrade costs
            </summary>
        </member>
        <member name="T:InternalModBot.UpgradePagesManager">
            <summary>
            Used by Mod-Bot to keep track of what modded upgrades are on what page
            </summary>
        </member>
        <member name="F:InternalModBot.UpgradePagesManager.CurrentPage">
            <summary>
            The page that is currently selected
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.Reset">
            <summary>
            Removes all modded upgrades and sets the current page to 0
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.RemoveModdedUpgradesFor(ModLibrary.Mod)">
            <summary>
            Removes all of the upgrades in UpgradeManager.Instance.UpgradeDescriptions placed there by a mod 
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.AddUpgrade(UpgradeType,System.Int32,ModLibrary.Mod)">
            <summary>
            Adds a upgrade to keep track of, this upgrade will be displayed on the page of the mod passed
            </summary>
            <param name="upgradeType"></param>
            <param name="level"></param>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.TryAddPage(ModLibrary.Mod)">
            <summary>
            If mod already has a page does nothing
            </summary>
            <param mod=""></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GenerateModPages">
            <summary>
            Generates a list where each instance in the list is a diffrent page, and each list in that list is all the moddedUpgradeTypeAndLevels for that page (only includes active mods)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetPageForMod(ModLibrary.Mod)">
            <summary>
            Generates a list of pages, and then gets the page index of the mod passed
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetPageForMod(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{ModLibrary.Mod,System.Collections.Generic.List{InternalModBot.ModdedUpgradeTypeAndLevel}}},ModLibrary.Mod)">
            <summary>
            Gets the page index of the mod passed from the pages list passed
            </summary>
            <param name="pages"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.TryGetModForPage(System.Int32)">
            <summary>
            Tries to get the mod responsable for a page, note that this generates a new pages list and uses that
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.TryGetModForPage(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{ModLibrary.Mod,System.Collections.Generic.List{InternalModBot.ModdedUpgradeTypeAndLevel}}},System.Int32)">
            <summary>
            Tries to get the mod responsable for a page
            </summary>
            <param name="pages"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.NextPage">
            <summary>
            Moves the page to the next avaliable page
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.PreviusPage">
            <summary>
            Moves the page to the previus avaliable page
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetMaxPage">
            <summary>
            Gets the amount of pages avaliable
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.IsUpgradeVisible(UpgradeType,System.Int32)">
            <summary>
            Called from FromIsUpgradeCurrentlyVisible and if this returns false the upgrade will not be displayed
            </summary>
            <param name="type"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.ForceUpgradeVisible(UpgradeType,System.Int32)">
            <summary>
            If this returns true the upgrade will be displayed no matter what
            </summary>
            <param name="type"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.IsModdedUpgradeType(UpgradeType)">
            <summary>
            Checks if the upgrade is a modded upgrade
            </summary>
            <param name="UpgradeType"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.ContainsMod(ModLibrary.Mod)">
            <summary>
            returns true if AllModdedUpgradePages contains the passed mod
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.OptionsSaver">
            <summary>
            Used by Mod-Bot to save mod options
            </summary>
        </member>
        <member name="M:InternalModBot.OptionsSaver.Load(System.String)">
            <summary>
            Sets the loaded options from an input json string
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.Save">
            <summary>
            Saves the current loaded options to a file
            </summary>
        </member>
        <member name="M:InternalModBot.OptionsSaver.GenerateSaveFormatString(ModLibrary.Mod,InternalModBot.OptionsSaver.SaveFormats,System.String)">
            <summary>
            Used to make sure that mods always get saved in the same format
            </summary>
            <param name="mod"></param>
            <param name="saveFormat"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.OptionsSaver.SaveFormats">
            <summary>
            The diffrent types of save formats supported
            </summary>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveString(ModLibrary.Mod,System.String,System.String)">
            <summary>
            Saves a string to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_string"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadString(ModLibrary.Mod,System.String)">
            <summary>
            Loads a string from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveInt(ModLibrary.Mod,System.String,System.Int32)">
            <summary>
            Saves a int to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_int"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadInt(ModLibrary.Mod,System.String)">
            <summary>
            loads an int from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveFloat(ModLibrary.Mod,System.String,System.Single)">
            <summary>
            Saves a float to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_float"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadFloat(ModLibrary.Mod,System.String)">
            <summary>
            loads a float from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveBool(ModLibrary.Mod,System.String,System.Boolean)">
            <summary>
            Saves a bool to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_bool"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadBool(ModLibrary.Mod,System.String)">
            <summary>
            loads a bool from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.ModsManager">
            <summary>
            Handles mod loading, disableing and enableing.
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.ReloadMods">
            <summary>
            Clears all loaded mods and loads them again
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.LoadMod(System.Byte[])">
            <summary>
            Loads a mod from only the bytes making up the assembly
            </summary>
            <param name="assemblyData"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.ClearCache">
            <summary>
            Clears all mod cache (including the AssetLoader cache)
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.GetAllLoadedMods">
            <summary>
            Gets a list of all mods that should currently be active
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.GetAllMods">
            <summary>
            Gets a list of all mods currently loaded, even mods that arent currently active
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.DisableMod(ModLibrary.Mod)">
            <summary>
            Disables a mod, this will call on OnModDeactivated on the mod, and Mod-Bot will not make any more calls to the mod until activated again 
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.EnableMod(ModLibrary.Mod)">
            <summary>
            Enables a mod, this will make Mod-Bot start calling it again and also call OnModRefreshed on it
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.IsModDeactivated(ModLibrary.Mod)">
            <summary>
            Checks if a mod is deactivated
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="F:InternalModBot.ModsManager.PassOnMod">
            <summary>
            A very special mod that will call all mods the most functions passed to it on all mods
            </summary>
        </member>
        <member name="T:InternalModBot.LoadedMod">
            <summary>
            Class used to keep both a mod and bool that decides if the mod is active in same list
            </summary>
        </member>
        <member name="M:InternalModBot.LoadedMod.#ctor(ModLibrary.Mod)">
            <summary>
            Sets the mod field to the passed mod, and will not deactivate the mod
            </summary>
            <param name="_mod"></param>
        </member>
        <member name="F:InternalModBot.LoadedMod.Mod">
            <summary>
            The Mod object the class is holding
            </summary>
        </member>
        <member name="F:InternalModBot.LoadedMod.IsDeactivated">
            <summary>
            Decides if the mod is deactivated.
            </summary>
        </member>
        <member name="T:InternalModBot.ModsPanelManager">
            <summary>
            Used by Mod-Bot to control most of the UI in Mod-Bot, this has control over the mod buttons and mods window. Note that all functions and fields on this class are private since they more or less work on their own.
            </summary>
        </member>
        <member name="T:InternalModBot.PassOnToModsManager">
            <summary>
            Used by Mod-Bot to call events on all loaded active mods, you probably dont want to use this from mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GetModName">
            <summary>
            Mods require us to override this one, but its never used
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GetUniqueID">
            <summary>
             Mods require us to override this one, but its never used
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnFirstPersonMoverSpawned(FirstPersonMover)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnFirstPersonMoverUpdate(FirstPersonMover)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnModRefreshed">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnLevelEditorStarted">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCommandRan(System.String)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="me"></param>
            <param name="upgrades"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterSpawned(Character)">
            <summary>
            Calls this method on all mods, also calls OnFirstPersonMoverSpawned if the passed character is a FirstPersonMover
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterUpdate(Character)">
            <summary>
            Calls this method on all mods, also calls OnFirstPersonMoverUpdate if the passed character is a firstpersonmover
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.AfterUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="owner"></param>
            <param name="upgrades"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileCreated(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileStartedMoving(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileUpdate(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileDestroyed(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileCreated(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileStartedMoving(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileUpdate(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileDestroyed(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileCreated(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileStartedMoving(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileUpdate(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileDestroyed(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterKilled(Character,Character,DamageSourceType)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="killedCharacter"></param>
            <param name="killerCharacter"></param>
            <param name="damageSourceType"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnModDeactivated">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.ShouldCursorBeEnabled">
            <summary>
            Gets the response from this from all loaded mods, and uses the or operator on all of them, then returns
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GlobalUpdate">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="T:InternalModBot.UpgradeIconDownloader">
            <summary>
            Used by Mod-Bot to download icons and put them in the upgrade icons when done
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradeIconDownloader.AddUpgradeIcon(UpgradeDescription,System.String)">
            <summary>
            Adds the passed url onto the queue, and puts it unto the image of the passed upgradeDescription
            </summary>
            <param name="upgradeDescription"></param>
            <param name="url"></param>
        </member>
        <member name="T:InternalModBot.UpdateChecker">
            <summary>
            Used by Mod-Bot to check if you have the latest version of mod-bot
            </summary>
        </member>
    </members>
</doc>
