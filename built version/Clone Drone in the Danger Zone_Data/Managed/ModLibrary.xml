<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModLibrary</name>
    </assembly>
    <members>
        <member name="T:ModLibrary.Accessor">
            <summary>
            Used to get / set / call private values and methods on objects
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.InstanceType">
            <summary>
            The <see cref="T:System.Type"/> that defines the members that can be accessed
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.Instance">
            <summary>
            The instance of the <see cref="T:System.Type"/> to get members from
            </summary>
        </member>
        <member name="F:ModLibrary.Accessor.FLAGS">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used to access members
            </summary>
        </member>
        <member name="M:ModLibrary.Accessor.#ctor(System.Type,System.Object)">
            <summary>
            Defines a new instance of the <see cref="T:ModLibrary.Accessor"/> class
            </summary>
            <param name="_type">The declaring <see cref="T:System.Type"/> that defines the members that should be accessed</param>
            <param name="_instance">The instance of the given <see cref="T:System.Type"/> to get members from</param>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.String,System.Object[])">
            <summary>
            Calls a private method in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <param name="methodName">The name of the method to call, case-sensitive</param>
            <param name="args">The arguments to pass to the method, <see langword="null"/> for no arguments</param>
            <returns>The return value of the method</returns>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.String,System.Object[])">
            <summary>
            Calls a private method in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <typeparam name="ReturnType">The <see cref="T:System.Type"/> to cast the method's return value to</typeparam>
            <param name="methodName">The name of the method to call, case-sensitive</param>
            <param name="args">The arguments to pass to the method, <see langword="null"/> for no arguments</param>
            <returns>The return value of the method casted to <typeparamref name="ReturnType"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField(System.String,System.Object)">
            <summary>
            Sets a private field in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <param name="fieldName">The name of the field to set, case-sensitive</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField``1(System.String,``0)">
            <summary>
            Sets a private field in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <typeparam name="FieldType">The <see cref="T:System.Type"/> of the field</typeparam>
            <param name="fieldName">The name of the field to set, case-sensitive</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField(System.String)">
            <summary>
            Gets a private field's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <param name="fieldName">The name of the field to get, case-sensitive</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``1(System.String)">
            <summary>
            Gets a private field's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <typeparam name="FieldType">The <see cref="T:System.Type"/> of the field</typeparam>
            <param name="fieldName">The name of the field to get, case-sensitive</param>
            <returns>The value of the field casted to <typeparamref name="FieldType"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.String,System.Object)">
            <summary>
            Sets a private property in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <param name="propertyName">The name of the property, case-sensitive</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``1(System.String,``0)">
            <summary>
            Sets a private property in the <see cref="T:System.Type"/> and instance specified in the constructor to a specified value
            </summary>
            <typeparam name="PropertyType">The <see cref="T:System.Type"/> of the property</typeparam>
            <param name="propertyName">The name of the property, case-sensitive</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty(System.String)">
            <summary>
            Gets a private property's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <param name="propertyName">The name of the property to get the value of, case-sensitive</param>
            <returns>The value of the proerty</returns>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``1(System.String)">
            <summary>
            Gets a private property's value in the <see cref="T:System.Type"/> and instance specified in the constructor
            </summary>
            <typeparam name="PropertyType">The <see cref="T:System.Type"/> of the property</typeparam>
            <param name="propertyName">The name of the property to get the value of, case-sensitive</param>
            <returns>The value of the proerty casted to <typeparamref name="PropertyType"/></returns>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Calls a method even if its private
            </summary>
            <param name="type">The type that the method is in. (Get this by typing "<see langword="typeof"/>(Class)" where "Class" is the <see langword="class"/> where the method you want to run is located).</param>
            <param name="methodName">The name of the method, case sensitive.</param>
            <param name="instance">The object that the method is attached to.</param>
            <param name="args">The arguments you want to pass in, if left empty no arguments will be called. Defined like this: <see langword="new object"/>[] { arg1, arg2, arg3 } </param>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``2(System.String,``0,System.Object[])">
            <summary>
            Calls a method even if its private and returns its return value.
            </summary>
            <typeparam name="InstanceType">The type of the class the method is in.</typeparam>
            <typeparam name="ReturnType">The return type of the method.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="instance">The instance of the class you want to call the method in.</param>
            <param name="args">The arguments to pass to the method.</param>
        </member>
        <member name="M:ModLibrary.Accessor.CallPrivateMethod``1(System.String,``0,System.Object[])">
            <summary>
            Calls a method even if its private but does not return its return value. (Use only for methods that have no return value or you dont need it)
            </summary>
            <typeparam name="InstanceType">The type of the class the method is in.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="instance">The instance of the class you want to call the method in.</param>
            <param name="args">The arguments to pass to the method.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets field value even if its private.
            </summary>
            <param name="type">The type that the field is in. (Get this by typing "typeof(Class)" where Class is the class where the method you want to run is located).</param>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The object that the field is attached to.</param>
            <param name="value">The value that the field should be set to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateField``2(System.String,``0,``1)">
            <summary>
            Sets field value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the class the field is in.</typeparam>
            <typeparam name="FieldType">The type of the field.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The instance of the class the field is in.</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField(System.Type,System.String,System.Object)">
            <summary>
            Gets field value even if its private.
            </summary>
            <param name="type">The type that the field is in. (Get this by typing "typeof(Class)" where Class is the class where the method you want to run is located).</param>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The object that the field is attached to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateField``2(System.String,``0)">
            <summary>
            Gets field value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the class the field is in.</typeparam>
            <typeparam name="FieldType">The type of the field.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="instance">The instance the field is in.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets property value even if its private.
            </summary>
            <param name="type">The type that the property is in. (Get this by typing "typeof(Class)" where Class is the class where the method you want to run is located).</param>
            <param name="propertyName">The name of the Property.</param>
            <param name="instance">The object that the property is attached to.</param>
            <param name="value">The value the property should be set to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.SetPrivateProperty``2(System.String,``0,``1)">
            <summary>
            Sets property value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the class the property is in.</typeparam>
            <typeparam name="PropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="instance">The instance the property is in.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty(System.Type,System.String,System.Object)">
            <summary>
            Sets property value even if its private.
            </summary>
            <param name="type">The type that the property is in. (Get this by typing "typeof(Class)" where Class is the class where the mathod you want to run is located).</param>
            <param name="propertyName">The name of the Property.</param>
            <param name="instance">The object that the property is attached to.</param>
        </member>
        <member name="M:ModLibrary.Accessor.GetPrivateProperty``2(System.String,``0)">
            <summary>
            Sets property value even if its private.
            </summary>
            <typeparam name="InstanceType">The type of the clas the property is in.</typeparam>
            <typeparam name="PropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="instance">The instance the property is in.</param>
        </member>
        <member name="T:ModLibrary.AssetLoader">
            <summary>
            Used to load assets from assetbundles (normally placed in the mods folder)
            </summary>
        </member>
        <member name="F:ModLibrary.AssetLoader.MODS_FOLDER_NAME">
            <summary>
            The name of the folder where mods are stored
            </summary>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetModsFolderDirectory">
            <summary>
            Returns the full directory to the mods folder directory where we expect most of the assetbundles to be
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile(System.String,System.String)">
            <summary>
            Gets a <see cref="T:UnityEngine.GameObject"/> from an asset bundle
            </summary>
            <param name="assetBundleName">The name of the asset bundle file (Must be located in the 'mods' folder for this method)</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile(System.String,System.String,System.String)">
            <summary>
            Gets a <see cref="T:UnityEngine.GameObject"/> from an asset bundle
            </summary>
            <param name="assetBundleName">The name of the asset bundle file</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <param name="customPath">The custom path of the asset bundle, starts from the 'Clone Drone in the Danger Zone' folder</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile``1(System.String,System.String)">
            <summary>
            Gets an Object of type <typeparamref name="T"/> from an asset bundle
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="assetBundleName">The name of the asset bundle file</param>
            <param name="objectName">The name of the object you want to get from the asset bundle</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetObjectFromFile``1(System.String,System.String,System.String)">
            <summary>
            Gets an Object of type <typeparamref name="T"/> from an assetbundle
            </summary>
            <typeparam name="T">The type of the object in the assetbundle</typeparam>
            <param name="assetBundleName">The name of the assetbundle file</param>
            <param name="objectName">The name of the object you want to get from the assetbundle</param>
            <param name="customPath">The custom path where the assetbundle is located (goes from <seealso cref="P:UnityEngine.Application.dataPath"/>)</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.TrySaveFileToMods(System.String,System.String)">
            <summary>Tries to save the file from the specified directory, (will not save file if one with the same already exists)</summary>
            <param name="url">The URL to download the file from.</param>
            <param name="name">The name of the file that will be created.</param>
        </member>
        <member name="M:ModLibrary.AssetLoader.SaveFileToMods(System.String,System.String)">
            <param name="url">The URL to download the file from.</param>
            <param name="name">The name of the file that will be created.</param>
        </member>
        <member name="M:ModLibrary.AssetLoader.SaveFileToModsAsync(System.String,System.String)">
            <summary>
            Saves a file into the mods folder, but does so asynchronously, returns a <see cref="T:ModLibrary.AssetLoader.AsyncDownload"/> that can be awaited in a corutine with yield return
            </summary>
            <param name="url">The url to download.</param>
            <param name="fileName">The name you want to give the file once you have downloaded it.</param>
            <returns>A <see cref="T:ModLibrary.AssetLoader.AsyncDownload"/> that can be awaited in corutines with yield return</returns>
        </member>
        <member name="M:ModLibrary.AssetLoader.ClearCache">
            <summary>
            Clears the cache for loaded assets
            </summary>
        </member>
        <member name="M:ModLibrary.AssetLoader.GetSubdomain(System.String)">
            <summary>
            Gets the directory 1 step under a spesific directory
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.AssetLoader.AsyncDownload">
            <summary>
            A download handeler than can be awaited in corutines with yield return
            </summary>
        </member>
        <member name="P:ModLibrary.AssetLoader.AsyncDownload.keepWaiting">
            <summary>
            If this return true, the download is not done yet
            </summary>
        </member>
        <member name="P:ModLibrary.AssetLoader.AsyncDownload.IsError">
            <summary>
            If this return true, there was an error during downloading
            </summary>
        </member>
        <member name="T:ModLibrary.FirstPersonMoverExtensions">
            <summary>
            Defines extension methods for <see cref="T:FirstPersonMover"/>
            </summary>
        </member>
        <member name="M:ModLibrary.FirstPersonMoverExtensions.GetEquippedWeaponModel(FirstPersonMover)">
            <summary>
            Returns the <see cref="T:FirstPersonMover"/>s currently equipped weapon, will return null if the <see cref="T:CharacterModel"/> is <see langword="null"/>, or the currently equipped <see cref="T:WeaponType"/> is <see cref="F:WeaponType.None"/>
            </summary>
            <param name="firstPersonMover"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.FirstPersonMoverExtensions.GiveUpgrade(FirstPersonMover,UpgradeType,System.Int32)">
            <summary>
            Gives the specified upgrade to a <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover"></param>
            <param name="upgradeType">The <see cref="T:UpgradeType"/> to give</param>
            <param name="level">The level of the upgrade</param>
            <exception cref="T:System.ArgumentNullException">If the given <see cref="T:FirstPersonMover"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given <see cref="T:UpgradeType"/> and level has not been defined in <see cref="F:UpgradeManager.UpgradeDescriptions"/></exception>
        </member>
        <member name="M:ModLibrary.FirstPersonMoverExtensions.GiveUpgrade(FirstPersonMover,UpgradeDescription)">
            <summary>
            Gives the specified <see cref="T:UpgradeDescription"/> to a <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover"></param>
            <param name="Upgrade">The upgrade to give</param>
        </member>
        <member name="T:ModLibrary.GlobalEventManagerExtensions">
            <summary>
            Defines extension methods for the <see cref="T:GlobalEventManager"/> class
            </summary>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListenerOnce(GlobalEventManager,System.String,System.Action)">
            <summary>
            Adds an event that can be dispatched only once if it's not already defined
            </summary>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action"/> to invoke when the event is dispatched</param>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListenerOnce``1(GlobalEventManager,System.String,System.Action{``0})">
            <summary>
            Adds an event with an argument that can be dispatched only once if it's not already defined
            </summary>
            <typeparam name="T">The type of the argument to pass to the <see cref="T:System.Action`1"/> when the event is dispatched</typeparam>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action`1"/> to invoke when the event is dispatched</param>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListener``1(GlobalEventManager,System.String,System.Action{``0})">
            <summary>
            Adds an event with an argument that can be dispatched if it's not already defined
            </summary>
            <typeparam name="T">The type of the argument to pass to the <see cref="T:System.Action`1"/> when the event is dispatched</typeparam>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action`1"/> to invoke when the event is dispatched</param>
        </member>
        <member name="M:ModLibrary.GlobalEventManagerExtensions.TryAddEventListener(GlobalEventManager,System.String,System.Action)">
            <summary>
            Adds an event that can be dispatched if it's not already defined
            </summary>
            <param name="globalEventManager"></param>
            <param name="eventName">The name of the event to dispatch from, see <see cref="T:GlobalEvents"/> for a complete list</param>
            <param name="callback">The <see cref="T:System.Action"/> to invoke when the event is dispatched</param>
        </member>
        <member name="T:ModLibrary.Vector3Extensions">
            <summary>
            Defines extension methods for <see cref="T:UnityEngine.Vector3"/>
            </summary>
        </member>
        <member name="M:ModLibrary.Vector3Extensions.GetDirectionTo(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the direction from one <see cref="T:UnityEngine.Vector3"/> to another
            </summary>
            <param name="startVector"></param>
            <param name="destinationVector">The <see cref="T:UnityEngine.Vector3"/> to get the direction to</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Vector3Extensions.GetDirectionToNormalized(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the normalized direction from one <see cref="T:UnityEngine.Vector3"/> to another
            </summary>
            <param name="startVector"></param>
            <param name="destinationVector">The <see cref="T:UnityEngine.Vector3"/> to get the direction to</param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.Generic2ButtonDialogue">
            <summary>
            Used to bring up a dialoge with 2 buttons
            </summary>
        </member>
        <member name="P:ModLibrary.Generic2ButtonDialogue.IsWindowOpen">
            <summary>
            If this is <see langword="true"/> there is currently a <see cref="T:ModLibrary.Generic2ButtonDialogue"/> open
            </summary>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.#ctor(System.String,System.String,System.Action,System.String,System.Action)">
            <summary>
            Creates a dialoge where the user can select one of 2 options
            </summary>
            <param name="message">The text that will be displayed on screen</param>
            <param name="button1Text">The text on the first button</param>
            <param name="onPressButton1">When the first button is pressed, this will be called, then the window will be closed, if <see langword="null"/>, it will just close the window</param>
            <param name="button2Text">The text on the second button</param>
            <param name="onPressButton2">When the first button is pressed, this will be called, then the window will be closed, if <see langword="null"/>, it will just close the window</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.SetColorOfFirstButton(UnityEngine.Color)">
            <summary>
            Sets the color of the first button
            </summary>
            <param name="color">The color to set the button to</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.SetColorOfSecondButton(UnityEngine.Color)">
            <summary>
            Sets the color of the second button
            </summary>
            <param name="color">The color to set the button to</param>
        </member>
        <member name="M:ModLibrary.Generic2ButtonDialogue.Close">
            <summary>
            Closes the window
            </summary>
        </member>
        <member name="T:ModLibrary.IEnumerableExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetComponents``1(System.Collections.Generic.IEnumerable{UnityEngine.Component})">
            <summary>
            Gets all the <see cref="T:UnityEngine.Component"/>s of the given type in each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="ComponentType">The type of the <see cref="T:UnityEngine.Component"/> to get, must enherit from <see cref="T:UnityEngine.Component"/></typeparam>
            <param name="collection"></param>
            <returns>All components gotten from the <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.DestroyAll``1(System.Collections.Generic.IEnumerable{``0},System.Single)">
            <summary>
            Destroys all the objects in a collection of <see cref="T:UnityEngine.Object"/>
            </summary>
            <typeparam name="ObjectType">The type of object to destroy, must derive from <see cref="T:UnityEngine.Object"/></typeparam>
            <param name="objects"></param>
            <param name="waitBeforeDestroy">An optional wait in seconds before destroying the objects</param>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.DestroyAllImmediate``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Immediately destroys all the objects in a collection of <see cref="T:UnityEngine.Object"/>
            </summary>
            <typeparam name="ObjectType">The type of object to destroy, must derive from <see cref="T:UnityEngine.Object"/></typeparam>
            <param name="objects"></param>
            <param name="allowDestroyingAssets">An optional argument to determine if destroying assets is allowed</param>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetFields``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets all fields of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="FieldType">The type to cast all the field values to</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to get the fields from</param>
            <param name="fieldName">The name of the field to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the found fields with the given name casted to the given <typeparamref name="FieldType"/></returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingFieldException">If the field could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetFields``2(System.Collections.Generic.IEnumerable{``0},System.String,``1,System.Reflection.BindingFlags)">
            <summary>
            Sets all fields of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the given value
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set all the fields in</param>
            <param name="fieldName">The name of the field to set from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="value">The value to set all the fields to</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingFieldException">If the field could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetFields``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1},System.Reflection.BindingFlags)">
            <summary>
            Sets all fields of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the value gotten by calling the given <see cref="T:System.Func`2"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="FieldType">The type of the field</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set all the fields in</param>
            <param name="fieldName">The name of the field to set from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="valueFunction">The <see cref="T:System.Func`2"/> used to get the value for each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingFieldException">If the field could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets all properties of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="PropertyType">The type to cast all the property values to</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to get the properties from</param>
            <param name="propertyName">The name of the property to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the found properties with the given name casted to the given <typeparamref name="PropertyType"/></returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMemberException">If the property could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String,``1,System.Reflection.BindingFlags)">
            <summary>
            Sets all properties of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the given value
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="PropertyType">The type of the property</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set the properties in</param>
            <param name="propertyName">The name of the property to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="value">The value to set all the fields to</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMemberException">If the property could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.SetPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1},System.Reflection.BindingFlags)">
            <summary>
            Sets all properties of the given name in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the value gotten by calling the given <see cref="T:System.Func`2"/>
            </summary>
            <typeparam name="CollectionType">The type if the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="PropertyType">The type of the property</typeparam>
            <param name="collection">>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to set the properties in</param>
            <param name="propertyName">The name of the property to get from the <typeparamref name="CollectionType"/>, case-sensitive by default</param>
            <param name="valueFunction">The <see cref="T:System.Func`2"/> used to get the value for each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the fields</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMemberException">If the property could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="arguments">The arguments to pass to the method, pass <see langword="null"/> for no arguments</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Object[]},System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="argumentFunction">The <see cref="T:System.Func`2"/> used to get the argument values for each instance of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/>, or the <paramref name="argumentFunction"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <typeparam name="ReturnType">The return type of the method called</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <returns>The return values of all the methods called</returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <typeparam name="ReturnType">The return type of the method called</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="arguments">The arguments to pass to all methods called, pass <see langword="null"/> for no arguments</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <returns>The return values of all the methods called</returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.CallMethods``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Object[]},System.Reflection.BindingFlags)">
            <summary>
            Calls a method in all instances of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to call the methods in</typeparam>
            <typeparam name="ReturnType">The return type of the method called</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate through</param>
            <param name="methodName">The name of the method to call, case-sesitive by default</param>
            <param name="argumentFunction">The <see cref="T:System.Func`2"/> used to get the argument values for each instance if the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to find the methods</param>
            <returns>The return values of all the methods called</returns>
            <exception cref="T:System.ArgumentNullException">If the given collection is <see langword="null"/>, or the <paramref name="argumentFunction"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the given name string is empty, or <see langword="null"/></exception>
            <exception cref="T:System.MissingMethodException">If the method could not be found</exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.GetRandomOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a random item from the collection, or the default value for the type if the collection is empty
            </summary>
            <typeparam name="CollectionType">The type of the collection</typeparam>
            <param name="collection"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the collection is <see langword="null"/></exception>
        </member>
        <member name="M:ModLibrary.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes the order of elements in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="CollectionType">The type of the collection to randomize</typeparam>
            <param name="enumerable"></param>
            <returns>The randomized collection</returns>
        </member>
        <member name="T:ModLibrary.ModSettingsExtensions">
            <summary>
            Extension methods for mod settings handling
            </summary>
        </member>
        <member name="M:ModLibrary.ModSettingsExtensions.GetModdedSettingsStringValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets a <see cref="T:System.String"/> value saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="name">The name of the setting</param>
            <returns>The value of the setting, will be <see langword="null"/> if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModSettingsExtensions.GetModdedSettingsBoolValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="name">The name of the setting</param>
            <returns>The value of the setting, will be <see langword="null"/> if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModSettingsExtensions.GetModdedSettingsFloatValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets a <see cref="T:System.Single"/> value saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="name">The name of the setting</param>
            <returns>The value of the setting, will be <see langword="null"/> if the option could not be found</returns>
        </member>
        <member name="M:ModLibrary.ModSettingsExtensions.GetModdedSettingsIntValue(SettingsManager,ModLibrary.Mod,System.String)">
            <summary>
            Gets an <see cref="T:System.Int32"/> value saved in the loaded settings
            </summary>
            <param name="me"></param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the setting</param>
            <param name="name">The name of the setting</param>
            <returns>The value of the setting, will be <see langword="null"/> if the option could not be found</returns>
        </member>
        <member name="T:ModLibrary.SingleMethodExtensions">
            <summary>
            Dont call these methods directly from here
            </summary>
        </member>
        <member name="M:ModLibrary.SingleMethodExtensions.GetObject``1(ModdedObject,System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.Object"/> at the specified index and casts it to type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the object at the index</typeparam>
            <param name="moddedObject"></param>
            <param name="index">The index of the <see cref="F:ModdedObject.objects"/> <see cref="T:System.Collections.Generic.List`1"/></param>
            <returns>The <see cref="T:UnityEngine.Object"/> at the specified index, casted to type <typeparamref name="T"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="moddedObject"/> is <see langword="null"/></exception>
            <exception cref="T:System.IndexOutOfRangeException">If the given index is outside the range of <see cref="F:ModdedObject.objects"/></exception>
            <exception cref="T:System.InvalidCastException">If the <see cref="T:UnityEngine.Object"/> at index <paramref name="index"/> is not of type <typeparamref name="T"/></exception>
        </member>
        <member name="M:ModLibrary.SingleMethodExtensions.IsModEnabled(ModLibrary.Mod)">
            <summary>
            Checks if the given <see cref="T:ModLibrary.Mod"/> is currently activated
            </summary>
            <param name="mod"></param>
            <returns><see langword="true"/> of the <see cref="T:ModLibrary.Mod"/> is enabled, <see langword="false"/> if it's disabled</returns>
            <exception cref="T:System.Exception">If the <see cref="T:ModLibrary.Mod"/> has not been loaded by <see cref="T:InternalModBot.ModsManager"/></exception>
        </member>
        <member name="T:ModLibrary.debug">
            <summary>
            Allows you to write to the in-game console (open it with F1).
            </summary>
        </member>
        <member name="M:ModLibrary.debug.Log(System.String)">
            <summary>
            Writes to the in-game console.
            </summary>
            <param name="_log">What to write</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.Object)">
            <summary>
            Writes the given object's <see cref="M:System.Object.ToString"/> value to the console
            </summary>
            <param name="_log">The object to write</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.Object,UnityEngine.Color)">
            <summary>
            Writes the given object's <see cref="M:System.Object.ToString"/> value to the console with the specified <see cref="T:UnityEngine.Color"/>
            </summary>
            <param name="_log">The <see cref="T:System.Object"/> to log</param>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to write in</param>
        </member>
        <member name="M:ModLibrary.debug.Log(System.String,UnityEngine.Color)">
            <summary>
            Writes to the in-game console, in color.
            </summary>
            <param name="_log">What to write</param>
            <param name="_color">The <see cref="T:UnityEngine.Color"/> to write in</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Passes every instance of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>s <see cref="M:System.Object.ToString"/> value to <see cref="M:ModLibrary.debug.Log(System.String)"/>
            </summary>
            <typeparam name="T">The type of the collection to write</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to write</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAll``1(System.Collections.Generic.IEnumerable{``0},UnityEngine.Color)">
            <summary>
            Passes every instance of the given <see cref="T:System.Collections.Generic.IEnumerable`1"/>s <see cref="M:System.Object.ToString"/> value to <see cref="M:ModLibrary.debug.Log(System.String)"/>
            </summary>
            <typeparam name="T">The type of the collection to write</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to write</param>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to write in</param>
        </member>
        <member name="M:ModLibrary.debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draws a line for the main camera, and if thats null for the player camera between point1 and point2 in the color of color for one frame.
            </summary>
            <param name="point1">Point to draw from</param>
            <param name="point2">Point to draw to</param>
            <param name="color">The color to draw in</param>
            <param name="timeToStay">The amount of unscaledTime in seconds to render the line</param>
        </member>
        <member name="M:ModLibrary.debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draws a ray for the main camera, and if thats null for the players camera from point in the direction of direction in the color color for one frame.
            </summary>
            <param name="point">The point to draw from</param>
            <param name="direction">The direction to draw in</param>
            <param name="color">The color to draw in</param>
            <param name="timeToStay">The amount of unscaledTime in seconds to render the line</param>
        </member>
        <member name="M:ModLibrary.debug.PrintAllChildren(UnityEngine.Transform)">
            <summary>
            Opens a notepad window with info about the passed transfrom like components and children
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:ModLibrary.LevelEditorObjectAdder">
            <summary>
            Can be used to add your own custom things to the editor!
            </summary>
        </member>
        <member name="M:ModLibrary.LevelEditorObjectAdder.AddObject(System.String,System.String,UnityEngine.Transform,UnityEngine.Texture2D)">
            <summary>
            Adds an object to the editor
            </summary>
            <param name="folderName">The name of the folder you want to add item to, if the folder doesnt already exist a new one will be created.</param>
            <param name="itemName">The name of the new item in the assets list.</param>
            <param name="transform">The prefab you want to add. PLEASE always make sure this is NOT a object in the scene but a real prefab.</param>
            <param name="texture">The texture to display in the assets list.</param>
        </member>
        <member name="T:ModLibrary.CustomUpgradeManager">
            <summary>
            Used by Mod-Bot to handle the custom upgrade pages. (Does things like handle the next and back buttons)
            </summary>
        </member>
        <member name="M:ModLibrary.CustomUpgradeManager.BackClicked">
            <summary>
            Should be called when the back button is clicked on the UI.
            </summary>
        </member>
        <member name="M:ModLibrary.CustomUpgradeManager.NextClicked">
            <summary>
            Should be called when the next button is clicked on the UI.
            </summary>
        </member>
        <member name="T:ModLibrary.UpgradeExtensionMethods">
            <summary>
            Implements Extension methods for upgrades
            </summary>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.AddUpgrade(UpgradeManager,UpgradeDescription,ModLibrary.Mod)">
            <summary>
            Adds an upgrade to the page of the specified <see cref="T:ModLibrary.Mod"/>, if the upgrade is a modded upgrade or not currently used it will also be added to <see cref="F:UpgradeManager.UpgradeDescriptions"/>
            </summary>
            <param name="upgradeManager"></param>
            <param name="upgrade">The <see cref="T:UpgradeDescription"/> of the upgrade to add</param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the upgrade</param>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.SetUpgradeAngle(UpgradeManager,UpgradeType,System.Int32,System.Single,ModLibrary.Mod)">
            <summary>
            Sets the angle of an upgrade with the specified <see cref="T:UpgradeType"/> and level
            </summary>
            <param name="upgradeManager"></param>
            <param name="upgradeType">The <see cref="T:UpgradeType"/> of the <see cref="T:UpgradeDescription"/> to set the angle on</param>
            <param name="level">The level of the <see cref="T:UpgradeDescription"/> to set the angle on</param>
            <param name="angle">The new angle to set</param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the upgrade</param>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.IsModdedUpgradeType(UpgradeDescription)">
            <summary>
            Checks if the upgrade is a modded upgrade
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.IsModdedUpgradeType(UpgradeType)">
            <summary>
            Checks if the <see cref="T:UpgradeType"/> is a modded type, by checking if the type is in the <see cref="T:UpgradeType"/> <see langword="enum"/>
            </summary>
            <param name="upgradeType"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.SetAngleOffset(UpgradeDescription,System.Single,ModLibrary.Mod)">
            <summary>
            Sets angle offset of this upgrade on the mod page, NOTE: Needs to be run AFTER <see cref="T:UpgradeManager"/>.AddUpgrade(<see cref="T:UpgradeDescription"/>, <see cref="T:ModLibrary.Mod"/>) is called
            </summary>
            <param name="upgradeDescription"></param>
            <param name="angle">The new angle of the <see cref="T:UpgradeDescription"/></param>
            <param name="mod">The <see cref="T:ModLibrary.Mod"/> that owns the upgrade</param>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.SetIconFromURL(UpgradeDescription,System.String)">
            <summary>
            Sets the icon of the upgrade to an image, this needs a internet connection (NOTE: This has a cache so if you want to change the icon you'll want to remove it from the cache in the data folder first)
            </summary>
            <param name="upgradeDescription"></param>
            <param name="url">The url to get the image from</param>
        </member>
        <member name="M:ModLibrary.UpgradeExtensionMethods.EnterUpgradeIconAngleDebugMode(UpgradeManager)">
            <summary>
            Enables setting the angles in the upgrade UI by scrolling on them and generating the code to set the angles again
            </summary>
            <param name="upgradeManager"></param>
        </member>
        <member name="T:ModLibrary.CharacterInputRestrictor">
            <summary>
            Defines methods for disabling and enabling certain inputs for a <see cref="T:FirstPersonMover"/>
            </summary>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.AddRestriction(FirstPersonMover,ModLibrary.InputRestrictions)">
            <summary>
            Adds an input restriction on the given <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover">The target to add a restriction to</param>
            <param name="inputRestriction">A bitfield of input restrictions to apply</param>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.HasRestrictions(FirstPersonMover,ModLibrary.InputRestrictions)">
            <summary>
            Returns if the given <see cref="T:FirstPersonMover"/> has all of the input restrictions in the given <see cref="T:ModLibrary.InputRestrictions"/> bitfield
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to check</param>
            <param name="inputRestriction">A bitfield of input restrictions to check for</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.RemoveRestriction(FirstPersonMover,ModLibrary.InputRestrictions)">
            <summary>
            Removes all input restrictions defined in the given bitfield from a <see cref="T:FirstPersonMover"/>, if no input restrictions remain, the <see cref="T:FirstPersonMover"/> will be removed from the input restrictions dictionary
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to remove the restrictions from</param>
            <param name="inputRestriction">A bitfield of input restrictions to remove</param>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.HasAnyRestrictions(FirstPersonMover)">
            <summary>
            Returns if the given <see cref="T:FirstPersonMover"/> has any input restrictions
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to check for</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.GetInputRestrictions(FirstPersonMover)">
            <summary>
            Gets the <see cref="T:ModLibrary.InputRestrictions"/> for the given <see cref="T:FirstPersonMover"/>, if the <see cref="T:FirstPersonMover"/> is not in the input restrictions dictionary, a <see cref="T:System.Collections.Generic.KeyNotFoundException"/> is thrown, to avoid this, consider calling <see cref="M:ModLibrary.CharacterInputRestrictor.HasAnyRestrictions(FirstPersonMover)"/> to check if any input restrictions are defined for a specific <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to attempt to get the <see cref="T:ModLibrary.InputRestrictions"/> of</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.SetInputRestrictions(FirstPersonMover,ModLibrary.InputRestrictions)">
            <summary>
            Sets the <see cref="F:ModLibrary.InputRestrictions.AttackKeyDown"/> on the given <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to set the input restrictions of</param>
            <param name="inputRestrictions">The <see cref="T:ModLibrary.InputRestrictions"/> to set</param>
        </member>
        <member name="M:ModLibrary.CharacterInputRestrictor.RemoveAllRestrictions(FirstPersonMover)">
            <summary>
            Removes all input restrictions for the given <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover"></param>
        </member>
        <member name="T:ModLibrary.InputRestrictions">
            <summary>
            Defines all bit field values for restricting <see cref="T:FirstPersonMover"/> input, to restrict a <see cref="T:FirstPersonMover"/>s input, see the <see cref="T:ModLibrary.CharacterInputRestrictor"/> class
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.Jump">
            <summary>
            Disables the jumping input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.AttackKeyDown">
            <summary>
            Disables the attack key down (swing melee weapon) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.AttackKeyUp">
            <summary>
            Disables the attack key up (release arrow or throw grenade) inputs for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.AttackKeyHeld">
            <summary>
            Disables the attack key held (aiming with the bow or the grenade) inputs for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SecondAttackKeyDown">
            <summary>
            Disables the secondary attack key down (kicking) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SecondAttackKeyUp">
            <summary>
            Disables the secondary attack key up (stop jetpack-kicking) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SecondAttackKeyHeld">
            <summary>
            Disables the secondary attack key held (jetpack-kicking) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.JetpackKeyHeld">
            <summary>
            Disables the jetpack input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.ScrollWheelDelta">
            <summary>
            Disables the scroll wheel delta (rotating arrows) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.UseAbilityKeyDown">
            <summary>
            Disables the use ability input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.UseAbilityKeyHeld">
            <summary>
            Disables the use ability continuously (flame breath) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.NextAbilityKeyDown">
            <summary>
            Disables the next ability key down input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.UseKeyDown">
            <summary>
            Disables the use key down input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.TransferConsciousnessKeyDown">
            <summary>
            Disables the transfer consciousness key down input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SwitchToWeapon1KeyDown">
            <summary>
            Disables the switch to weapon 1 key down (sword) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SwitchToWeapon2KeyDown">
            <summary>
            Disables the switch to weapon 2 key down (bow) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SwitchToWeapon3KeyDown">
            <summary>
            Disables the switch to weapon 3 key down (hammer) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SwitchToWeapon4KeyDown">
            <summary>
            Disables the switch to weapon 4 key down (spear) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.SwitchToWeapon5KeyDown">
            <summary>
            Disables the switch to weapon 5 key down (grenade) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.NextWeaponKeyDown">
            <summary>
            Disables the next weapon key down input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.EmoteKeyHeld">
            <summary>
            Disables the emote key held (emote menu) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.VerticalCursorMovementUp">
            <summary>
            Disables the upwards cursor movement (sets <see cref="P:IFPMoveCommandInput.VerticalCursorMovement"/> to 0 if it's greater than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.VerticalCursorMovementDown">
            <summary>
            Disables the downwards cursor movement (sets <see cref="P:IFPMoveCommandInput.VerticalCursorMovement"/> to 0 if it's less than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.HorizontalCursorMovementLeft">
            <summary>
            Disables the cursor moving to the left (sets <see cref="P:IFPMoveCommandInput.HorizontalCursorMovement"/> to 0 if it's less than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.HorizontalCursorMovementRight">
            <summary>
            Disables the cursor moving to the right (sets <see cref="P:IFPMoveCommandInput.HorizontalCursorMovement"/> to 0 if it's greater than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.VerticalMovementForward">
            <summary>
            Disables the moving forwards input (sets <see cref="P:IFPMoveCommandInput.VerticalMovement"/> to 0 if it's greater than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.VerticalMovementBackwards">
            <summary>
            Disables the moving backwards input (sets <see cref="P:IFPMoveCommandInput.VerticalMovement"/> to 0 if it's less than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.HorizontalMovementLeft">
            <summary>
            Disables the moving left input (sets <see cref="P:IFPMoveCommandInput.HorizontalMovement"/> to 0 if it's less than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.HorizontalMovementRight">
            <summary>
            Disables the moving right input (sets <see cref="P:IFPMoveCommandInput.HorizontalMovement"/> to 0 if it's greater than 0) for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.VerticalCursorMovement">
            <summary>
            Disables the vertical cursor movement for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.HorizontalCursorMovement">
            <summary>
            Disables the horizontal cursor movement for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.VerticalMovement">
            <summary>
            Disables the vertical movement (walk forwards and backwards) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="F:ModLibrary.InputRestrictions.HorizontalMovement">
            <summary>
            Disables the horizontal movement (walk left and right) input for the <see cref="T:FirstPersonMover"/> the bitfield is applied to
            </summary>
        </member>
        <member name="T:ModLibrary.Mod">
            <summary>
            Base class for all mods, contains virtual implementations for different events in the game.
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnFirstPersonMoverSpawned(FirstPersonMover)">
            <summary>
            Called in <see cref="M:Character.Start"/> if the <see cref="T:Character"/> is of type <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> that was spawned</param>
        </member>
        <member name="M:ModLibrary.Mod.OnFirstPersonMoverUpdate(FirstPersonMover)">
            <summary>
            Called in <see cref="M:Character.Update"/> if the <see cref="T:Character"/> is of type <see cref="T:FirstPersonMover"/>
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> that was updated</param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterSpawned(Character)">
            <summary>
            Called in <see cref="M:Character.Start"/>
            </summary>
            <param name="character">The <see cref="T:Character"/> that was spawned</param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterUpdate(Character)">
            <summary>
            Called in <see cref="M:Character.Update"/>
            </summary>
            <param name="character">The <see cref="T:Character"/> that was updated</param>
        </member>
        <member name="M:ModLibrary.Mod.OnModRefreshed">
            <summary>
            Called in <see cref="M:InternalModBot.ModsManager.ReloadMods"/>
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnLevelEditorStarted">
            <summary>
            Called when the level editor is started.
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnCommandRan(System.String)">
            <summary>
            Called when you run a command in the console (mostly for debuging).
            </summary>
            <param name="command">The text entered into the command field of the console</param>
        </member>
        <member name="M:ModLibrary.Mod.GetModName">
            <summary>
            Returns the name of the mod, override to set the name of you mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GetUniqueID">
            <summary>
            Returns a unique ID for every mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GetModDescription">
            <summary>
            Returns the description of the mod, override to change the description of your mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GetModImageURL">
            <summary>
            Returns the url to the image to be displayed in the mods menu, override to set a custom image for your mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.OnUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Called at the start <see cref="M:FirstPersonMover.RefreshUpgrades"/>
            </summary>
            <param name="owner"></param>
            <param name="upgrades">The <see cref="T:UpgradeCollection"/> on the <see cref="T:FirstPersonMover"/> object</param>
        </member>
        <member name="M:ModLibrary.Mod.AfterUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Called at the end of <see cref="M:FirstPersonMover.RefreshUpgrades"/>
            </summary>
            <param name="owner"></param>
            <param name="upgrades">The <see cref="T:UpgradeCollection"/> on the <see cref="T:FirstPersonMover"/> object</param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileStartedMoving(Projectile)">
            <summary>
            Called in <see cref="M:Projectile.StartFlying(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,Character,System.Int32,System.Single)"/>
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileUpdate(Projectile)">
            <summary>
            Called in <see cref="M:Projectile.FixedUpdate"/>
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnProjectileDestroyed(Projectile)">
            <summary>
            Called in <see cref="M:Projectile.DestroyProjectile"/> and <see cref="M:Projectile.OnEnvironmentCollided(System.Boolean)"/>
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileStartedMoving(ArrowProjectile)">
            <summary>
            Called in <see cref="M:Projectile.StartFlying(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,Character,System.Int32,System.Single)"/> if the <see cref="T:Projectile"/> is of type <see cref="T:ArrowProjectile"/>
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileUpdate(ArrowProjectile)">
            <summary>
            Called in <see cref="M:Projectile.FixedUpdate"/> if the <see cref="T:Projectile"/> is of type <see cref="T:ArrowProjectile"/>
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnArrowProjectileDestroyed(ArrowProjectile)">
            <summary>
            Called in <see cref="M:Projectile.DestroyProjectile"/> and <see cref="M:Projectile.OnEnvironmentCollided(System.Boolean)"/> if the <see cref="T:Projectile"/> is of type <see cref="T:ArrowProjectile"/>
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileStartedMoving(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called in <see cref="M:Projectile.StartFlying(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,Character,System.Int32,System.Single)"/> if the <see cref="T:Projectile"/> is of type <see cref="T:BulletProjectile"/>
            </summary>
            <param name="bullet"></param>
            <param name="isRepairFire"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileUpdate(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called in <see cref="M:Projectile.FixedUpdate"/> if the <see cref="T:Projectile"/> is of type <see cref="T:BulletProjectile"/>
            </summary>
            <param name="bullet"></param>
            <param name="isFlameBreath"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnBulletProjectileDestroyed(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called in <see cref="M:Projectile.DestroyProjectile"/> and <see cref="M:Projectile.OnEnvironmentCollided(System.Boolean)"/> if the <see cref="T:Projectile"/> is of type <see cref="T:BulletProjectile"/>
            </summary>
            <param name="bullet"></param>
            <param name="isRepairFire"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
        </member>
        <member name="M:ModLibrary.Mod.OnCharacterKilled(Character,Character,DamageSourceType)">
            <summary>
            Called in <see cref="M:Character.onDeath(Character,DamageSourceType)"/>
            </summary>
            <param name="killedCharacter">The <see cref="T:Character"/> that was killed</param>
            <param name="killerCharacter">The killer <see cref="T:Character"/></param>
            <param name="damageSourceType">The cause of death</param>
        </member>
        <member name="M:ModLibrary.Mod.OnModDeactivated">
            <summary>
            Called when the mod is deactivated from the mods menu, override this method to perform additional cleanup, like remove/disable all added components, reset values in classes, etc. Modded upgrades are automatically hidden when the owner mod is disabled
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.ImplementsSettingsWindow">
            <summary>
            If this returns <see langword="true"/> it will active the mod settings button in the mods window for this mod.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.CreateSettingsWindow(ModLibrary.ModOptionsWindowBuilder)">
            <summary>
            Gets called when the user clicks on the mod settings button in the mods window. Allows you to create a neat little UI that saves the values for you. Get the values set by this with SettingsManager.Instance.GetModdedSettingsBoolValue, GetModdedSettingsStringValue, GetModdedSettingsIntValue and GetModdedSettingsFloatValue
            </summary>
            <param name="builder">The object used to build the UI.</param>
        </member>
        <member name="M:ModLibrary.Mod.ShouldCursorBeEnabled">
            <summary>
            If this returns <see langword="true"/> the cursor will get enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.Mod.GlobalUpdate">
            <summary>
            Called every frame
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnMultiplayerEventReceived(GenericStringForModdingEvent)">
            <summary>
            Called whenever we received a <see cref="T:GenericStringForModdingEvent"/> from a client (including your own if you used <see cref="M:ModLibrary.MultiplayerMessageSender.SendToAllClients(System.String)"/>)
            </summary>
            <param name="moddedEvent">The received <see cref="T:GenericStringForModdingEvent"/></param>
        </member>
        <member name="M:ModLibrary.Mod.OnModEnabled">
            <summary>
            Called when the mod gets loaded or enabled after previously being disabled
            </summary>
        </member>
        <member name="M:ModLibrary.Mod.OnResourcesLoad(System.String)">
            <summary>
            Will be called just before anything tries to load something from the Resources folder. If this returns <see langword="null"/> it will continue like normal, but if this returns anything else than <see langword="null"/> that will be returned by <see cref="M:UnityEngine.Resources.Load(System.String)"/> instead.
            </summary>
            <param name="path">The path specified</param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.ModOptionsWindowBuilder">
            <summary>
            Used to place all of the options in the options window
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddSlider(System.Single,System.Single,System.Single,System.String,UnityEngine.UI.Slider@,System.Action{System.Single})">
            <summary>
            Adds a slider, note that the value of the slider will be saved by Mod-Bot so you dont need to save it in a ny way
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">The maximum value of the slider</param>
            <param name="defaultValue">The value the slider will be set to before it is changed by the user</param>
            <param name="name">The name of the slider, this will both be displayed to the user and used in the mod to get the value (no 2 names should EVER be the same)</param>
            <param name="slider">A reference that is set to the created slider</param>
            <param name="onChange">A callback that gets called when the slider gets changed, if null wont do anything</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddSlider(System.Single,System.Single,System.Single,System.String,System.Action{System.Single})">
            <summary>
            Adds a slider, note that the value of the slider will be saved by Mod-Bot so you dont need to save it in a ny way
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">The maximum value of the slider</param>
            <param name="defaultValue">The value the slider will be set to before it is changed by the user</param>
            <param name="name">The name of the slider, this will both be displayed to the user and used in the mod to get the value (no 2 names should EVER be the same)</param>
            <param name="onChange">A callback that gets called when the slider gets changed, if null wont do anything</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddIntSlider(System.Int32,System.Int32,System.Int32,System.String,UnityEngine.UI.Slider@,System.Action{System.Int32})">
            <summary>
            Adds a slider to the options window that can only be whole numbers
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">That maximum value of the slider</param>
            <param name="defaultValue">The value the slider will be set to before it is changed by the user</param>
            <param name="name">Both the display name in the list and used by you to get the value (no 2 names should EVER be the same)</param>
            <param name="slider">A reference that is set to the created slider</param>
            <param name="onChange">Called when the value is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddIntSlider(System.Int32,System.Int32,System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            Adds a slider to the options window that can only be whole numbers
            </summary>
            <param name="min">The minimum value of the slider</param>
            <param name="max">That maximum value of the slider</param>
            <param name="defaultValue">The value the slider will be set to before it is changed by the user</param>
            <param name="name">Both the display name in the list and used by you to get the value (no 2 names should EVER be the same)</param>
            <param name="onChange">Called when the value is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddCheckbox(System.Boolean,System.String,UnityEngine.UI.Toggle@,System.Action{System.Boolean})">
            <summary>
            Adds a checkbox to the mods window
            </summary>
            <param name="defaultValue">The value the checkbox will be set to before the user changes it</param>
            <param name="name">Both the display name of the checkbox and what you use to get the value of the checkbox (no 2 names should EVER be the same)</param>
            <param name="toggle">>A reference that is set to the created toggle</param>
            <param name="onChange">Called when the value of the checkbox is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddCheckbox(System.Boolean,System.String,System.Action{System.Boolean})">
            <summary>
            Adds a checkbox to the mods window
            </summary>
            <param name="defaultValue">The value the checkbox will be set to before the user changes it</param>
            <param name="name">Both the display name of the checkbox and what you use to get the value of the checkbox (no 2 names should EVER be the same)</param>
            <param name="onChange">Called when the value of the checkbox is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddInputField(System.String,System.String,UnityEngine.UI.InputField@,System.Action{System.String})">
            <summary>
            Adds a input field to the mods window
            </summary>
            <param name="defaultValue">The defualt value before it is edited by the user</param>
            <param name="name">Name used both as a display name and as a key for you to get the value by later (no 2 names should EVER be the same)</param>
            <param name="inputField">A reference to the created InputField</param>
            <param name="onChange">Gets called when the value of the inputField gets changed, if null doesnt nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddInputField(System.String,System.String,System.Action{System.String})">
            <summary>
            Adds a input field to the mods window
            </summary>
            <param name="defaultValue">The defualt value before it is edited by the user</param>
            <param name="name">Name used both as a display name and as a key for you to get the value by later (no 2 names should EVER be the same)</param>
            <param name="onChange">Gets called when the value of the inputField gets changed, if null doesnt nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddDropdown(System.String[],System.Int32,System.String,UnityEngine.UI.Dropdown@,System.Action{System.Int32})">
            <summary>
            Adds a dropdown to the mods window
            </summary>
            <param name="options">The diffrent options that should be selectable</param>
            <param name="defaultIndex">what index in the previus array will be selected before the user edits it</param>
            <param name="name">Display name and key for you later (no 2 names should EVER be the same)</param>
            <param name="dropdown">a reference to the dropdown created, null if defaultIndex is not in the bounds of options</param>
            <param name="onChange">Gets called when the value of the dropdown is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddDropdown(System.String[],System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            Adds a dropdown to the mods window
            </summary>
            <param name="options">The diffrent options that should be selectable</param>
            <param name="defaultIndex">what index in the previus array will be selected before the user edits it</param>
            <param name="name">Display name and key for you later (no 2 names should EVER be the same)</param>
            <param name="onChange">Gets called when the value of the dropdown is changed, if null does nothing</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddDropDown``1(System.Int32,System.String,UnityEngine.UI.Dropdown@,System.Action{System.Int32})">
            <summary>
            Adds a dropdown to the options window
            </summary>
            <typeparam name="T">Must be an enum type, the options of this enum will be displayed as the options of the dropdown</typeparam>
            <param name="defaultIndex">The index in the enum that will be selected before the user edits it</param>
            <param name="name">Display name and key to get value (no 2 names should EVER be the same)</param>
            <param name="dropdown">a refrence to the dropdown created</param>
            <param name="onChange"></param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddDropDown``1(System.Int32,System.String,System.Action{System.Int32})">
            <summary>
            Adds a dropdown to the options window
            </summary>
            <typeparam name="T">Must be an enum type, the options of this enum will be displayed as the options of the dropdown</typeparam>
            <param name="defaultIndex">The index in the enum that will be selected before the user edits it</param>
            <param name="name">Display name and key to get value (no 2 names should EVER be the same)</param>
            <param name="onChange"></param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddButton(System.String,UnityEngine.UI.Button@,UnityEngine.Events.UnityAction)">
            <summary>
            Adds a button to the options window
            </summary>
            <param name="text">The text displayed on the button</param>
            <param name="button">a refrence to the created button</param>
            <param name="callback">Called when the user clicks the button</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddButton(System.String,UnityEngine.Events.UnityAction)">
            <summary>
            Adds a button to the options window
            </summary>
            <param name="text">The text displayed on the button</param>
            <param name="callback">Called when the user clicks the button</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddLabel(System.String,UnityEngine.UI.Text@)">
            <summary>
            Adds a plain text to the options window
            </summary>
            <param name="text">string that will be displayed</param>
            <param name="_text">a refrence to the created text</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.AddLabel(System.String)">
            <summary>
            Adds a plain text to the options window
            </summary>
            <param name="text">string that will be displayed</param>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.CloseWindow">
            <summary>
            Closes the options window, this also opens its parent window (probably the mods window)
            </summary>
        </member>
        <member name="M:ModLibrary.ModOptionsWindowBuilder.ForceCloseWindow">
            <summary>
            Closes the options window, does NOT open the parent window
            </summary>
        </member>
        <member name="T:ModLibrary.EnumTools">
            <summary>
            General tools to help you when working with enums!
            </summary>
        </member>
        <member name="M:ModLibrary.EnumTools.GetName``1(``0)">
            <summary>
            Gets the name of the given value in an <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If value is <see langword="null"/> or <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T">The type of <see langword="enum"/> to get the name from</typeparam>
            <param name="value">The value assigned to an entry in the specified <see langword="enum"/></param>
            <returns>The name of the entry with the value <paramref name="value"/></returns>
        </member>
        <member name="M:ModLibrary.EnumTools.GetNames``1">
            <summary>
            Gets all names in the given <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.EnumTools.GetValues``1">
            <summary>
            Gets all values of an <see langword="enum"/>
            <para>Exceptions:</para>
            <para/><see cref="T:System.ArgumentNullException"/>: If <see langword="typeof"/>(<typeparamref name="T"/>) is <see langword="null"/>
            <para/><see cref="T:System.ArgumentException"/>: <typeparamref name="T"/> is not an <see langword="enum"/> type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.ModToolExtensionMethods">
            <summary>
            Extention methods implemented by mod tools, don't call these directly.
            </summary>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetAllEnemyCharactersInRange(CharacterTracker,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all enemy <see cref="T:Character"/>s in the specified range
            </summary>
            <param name="characterTracker"></param>
            <param name="origin">The point to calculate the distance from</param>
            <param name="radius">The radius to get all enemy <see cref="T:Character"/>s within</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetAllCharactersInRange(CharacterTracker,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all <see cref="T:Character"/>s in the specified range
            </summary>
            <param name="characterTracker"></param>
            <param name="origin">The point to calculate the distance from</param>
            <param name="radius">The radius to get all <see cref="T:Character"/>s within</param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.IsUpgradeTypeAndLevelUsed(UpgradeManager,UpgradeType,System.Int32)">
            <summary>
            Checks whether or not the given <see cref="T:UpgradeType"/> and level is already in use by an <see cref="T:UpgradeDescription"/>
            </summary>
            <param name="upgradeManager"></param>
            <param name="ID">The ID of the upgrade</param>
            <param name="Level"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBodyPart(Character,MechBodyPartType)">
            <summary>
            Gets the first found <see cref="T:MechBodyPart"/> of the given <see cref="T:MechBodyPartType"/> (Returns <see langword="null"/> if the given <see cref="T:Character"/> does not have the specified <see cref="T:MechBodyPartType"/>)
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModToolExtensionMethods.GetBodyParts(Character,MechBodyPartType)">
            <summary>
            Gets all <see cref="T:MechBodyPart"/>s of the given <see cref="T:MechBodyPartType"/>
            </summary>
            <param name="character"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ModLibrary.ModBotUserIdentifier">
            <summary>
            Used to find out other players <see cref="T:BoltConnection"/> and if they are using Mod-Bot
            </summary>
        </member>
        <member name="M:ModLibrary.ModBotUserIdentifier.IsUsingModBot(System.String)">
            <summary>
            Returns if the player with the target playfabID is running Mod-Bot
            </summary>
            <param name="playfabID"></param>
            <returns></returns>
        </member>
        <member name="M:ModLibrary.ModBotUserIdentifier.RequestIds(FirstPersonMover)">
            <summary>
            Sends a request to get some info on all players with mod-bot
            </summary>
        </member>
        <member name="M:ModLibrary.ModBotUserIdentifier.OnEvent(GenericStringForModdingEvent)">
            <summary>
            Called when we recive a modded event
            </summary>
            <param name="moddedEvent"></param>
        </member>
        <member name="T:ModLibrary.MultiplayerEventCallback">
            <summary>
            Methods defined in this class can add and remove listeners to <see cref="T:Bolt.Event"/> and invoke methods when that <see cref="T:Bolt.Event"/> is recieved by our client
            </summary>
        </member>
        <member name="M:ModLibrary.MultiplayerEventCallback.AddEventListener``1(System.Action{``0},System.Boolean)">
            <summary>
            Add a callback to a method from event of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the <see cref="T:Bolt.Event"/> to add the callback to</typeparam>
            <param name="callback">The <see cref="T:System.Action`1"/> to call when the <see cref="T:Bolt.Event"/> <typeparamref name="T"/> is recieved</param>
            <param name="allowDuplicate">Determines if multiple callbacks to the same method should be allowed</param>
        </member>
        <member name="M:ModLibrary.MultiplayerEventCallback.RemoveEventListener``1(System.Action{``0})">
            <summary>
            Remove the given callback from the callback list for the given <see cref="T:Bolt.Event"/> type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of <see cref="T:Bolt.Event"/> to remove a callback from</typeparam>
            <param name="callback">The <see cref="T:System.Action`1"/> to remove from the callback list</param>
        </member>
        <member name="M:ModLibrary.MultiplayerEventCallback.OnEventRecieved``1(``0)">
            <summary>
            Called from inside Mod-Bot whenever we recive an event
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_event"></param>
        </member>
        <member name="T:ModLibrary.MultiplayerMessageSender">
            <summary>
            Used to send generic string messages
            </summary>
        </member>
        <member name="M:ModLibrary.MultiplayerMessageSender.SendToAllClients(System.String)">
            <summary>
            Sends the given <paramref name="message"/> to all clients (including ourselves) connected to the same server we are connected to
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:ModLibrary.MultiplayerMessageSender.SendToAllClients(System.String,Bolt.GlobalTargets)">
            <summary>
            Sends the given <paramref name="message"/> to the given <see cref="T:Bolt.GlobalTargets"/>
            </summary>
            <param name="message"></param>
            <param name="targets"></param>
        </member>
        <member name="T:ModLibrary.YieldInstructions.WaitForCharacterModelAndUpgradeInitialization">
            <summary>
            Waits until both the upgrades and character model has been initialized on the tracking <see cref="T:FirstPersonMover"/>
            </summary>
        </member>
        <member name="M:ModLibrary.YieldInstructions.WaitForCharacterModelAndUpgradeInitialization.#ctor(FirstPersonMover)">
            <summary>
            Initializes a new instance of the <see cref="T:ModLibrary.YieldInstructions.WaitForCharacterModelAndUpgradeInitialization"/> instruction
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to check</param>
        </member>
        <member name="P:ModLibrary.YieldInstructions.WaitForCharacterModelAndUpgradeInitialization.keepWaiting">
            <summary>
            Returns if the <see cref="T:UnityEngine.Coroutine"/> should keep waiting
            </summary>
        </member>
        <member name="T:ModLibrary.YieldInstructions.WaitForCharacterModelInitialization">
            <summary>
            Waits until the character model of the given <see cref="T:FirstPersonMover"/> as been initialized
            </summary>
        </member>
        <member name="M:ModLibrary.YieldInstructions.WaitForCharacterModelInitialization.#ctor(FirstPersonMover)">
            <summary>
            Initializes a new instance of the <see cref="T:ModLibrary.YieldInstructions.WaitForCharacterModelInitialization"/> instruction
            </summary>
            <param name="firstPersonMover">The <see cref="T:FirstPersonMover"/> to check</param>
        </member>
        <member name="P:ModLibrary.YieldInstructions.WaitForCharacterModelInitialization.keepWaiting">
            <summary>
            Returns if the <see cref="T:UnityEngine.Coroutine"/> should keep waiting
            </summary>
        </member>
        <member name="T:InternalModBot.CalledFromInjections">
            <summary>
            Contains methods that get called from the game itself
            </summary>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromRefreshUpgradesStart(FirstPersonMover)">
            <summary>
            Called at the start of <see cref="M:FirstPersonMover.RefreshUpgrades"/>
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromRefreshUpgradesEnd(FirstPersonMover)">
            <summary>
            Called at the end of <see cref="M:FirstPersonMover.RefreshUpgrades"/>
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnCharacterStart(Character)">
            <summary>
            Called from <see cref="M:Character.Start"/>
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnCharacterUpdate(Character)">
            <summary>
            Called from <see cref="M:Character.Update"/>
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnCharacterDeath(Character,Character,DamageSourceType)">
            <summary>
            Called from <see cref="M:Character.onDeath(Character,DamageSourceType)"/>
            </summary>
            <param name="owner"></param>
            <param name="killer"></param>
            <param name="damageSource"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromGetAngleOffset(UpgradeDescription)">
            <summary>
            Called from <see cref="M:UpgradeDescription.GetAngleOffset"/> and returns the angle the upgrade should be on the current page
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromIsUpgradeCurrentlyVisible(UpgradeDescription)">
            <summary>
            Called from <see cref="M:UpgradeDescription.IsUpgradeCurrentlyVisible"/> and returns if the upgrade should be visible on the current page
            </summary>
            <param name="upgrade"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromFixedUpdate(Projectile)">
            <summary>
            Called from <see cref="M:Projectile.FixedUpdate"/>
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromStartFlying(Projectile)">
            <summary>
            Called from <see cref="M:Projectile.StartFlying(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,Character)"/>
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromDestroyProjectile(Projectile)">
            <summary>
            Called from <see cref="M:Projectile.DestroyProjectile"/>
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromOnEnvironmentCollided(Projectile)">
            <summary>
            Gets from <see cref="M:Projectile.OnEnvironmentCollided(System.Boolean)"/>
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromRefreshCursorEnabled">
            <summary>
            Called from <see cref="M:GameUIRoot.RefreshCursorEnabled"/> and returns if the cursor has been disabled by a mod
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromGetPositionForAIToAimAt(Character)">
            <summary>
            Called from <see cref="M:MortarWalker.GetPositionForAIToAimAt"/>
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromResourcesLoad(System.String)">
            <summary>
            Called from <see cref="M:UnityEngine.Resources.Load(System.String)"/>, <see cref="M:UnityEngine.Resources.Load``1(System.String)"/> and <see cref="P:UnityEngine.ResourceRequest.asset"/>
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.CalledFromInjections.FromExecuteCommand(FirstPersonMover,Bolt.Command)">
            <summary>
            Called from <see cref="M:FirstPersonMover.ExecuteCommand(Bolt.Command,System.Boolean)"/> and sets the <see cref="P:FPMoveCommand.Input"/> properties to 0 or <see langword="false"/> is they have been restricted
            </summary>
            <param name="owner"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.ConsoleInputManager">
            <summary>
            Used by Mod-Bot to define commands
            </summary>
        </member>
        <member name="M:InternalModBot.ConsoleInputManager.OnCommandRan(System.String)">
            <summary>
            The same as <see cref="M:ModLibrary.Mod.OnCommandRan(System.String)"/>, but called in Mod-Bot
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:InternalModBot.ConsoleInputManager.Crash">
            <summary>
            Crashes the game
            </summary>
        </member>
        <member name="T:InternalModBot.IgnoreCrashesManager">
            <summary>
            Used by Mod-Bot to ignore crashes when the ignoreallcrashes command is active
            </summary>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.Start">
            <summary>
            Starts ignoring crashes if we are currently configuerd to
            </summary>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.SetIsIgnoringCrashes(System.Boolean)">
            <summary>
            Sets if we should ignore crashes
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:InternalModBot.IgnoreCrashesManager.GetIsIgnoringCrashes">
            <summary>
            Gets if we are currently ignoring crashes
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.DebugLineDrawingManager">
            <summary>
            Used by Mod-Bot to draw lines on screen
            </summary>
        </member>
        <member name="M:InternalModBot.DebugLineDrawingManager.AddLine(InternalModBot.DebugLineDrawingManager.LineInfo)">
            <summary>
            Adds a line to the lines to draw this frame
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:InternalModBot.DebugLineDrawingManager.LineInfo">
            <summary>
            Describes a line in 3D space
            </summary>
        </member>
        <member name="M:InternalModBot.DebugLineDrawingManager.LineInfo.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:InternalModBot.DebugLineDrawingManager.LineInfo"/> class
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="color"></param>
            <param name="endTime"></param>
        </member>
        <member name="F:InternalModBot.DebugLineDrawingManager.LineInfo.Point1">
            <summary>
            The start point of the line
            </summary>
        </member>
        <member name="F:InternalModBot.DebugLineDrawingManager.LineInfo.Point2">
            <summary>
            The end point of the line
            </summary>
        </member>
        <member name="F:InternalModBot.DebugLineDrawingManager.LineInfo.Color">
            <summary>
            The <see cref="T:UnityEngine.Color"/> of the line
            </summary>
        </member>
        <member name="F:InternalModBot.DebugLineDrawingManager.LineInfo.EndTime">
            <summary>
            The time we want to stop displaying the line
            </summary>
        </member>
        <member name="T:InternalModBot.DoubleValueHolder`2">
            <summary>
            Used to hold 2 values in 1 object
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:InternalModBot.DoubleValueHolder`2"/> struct
            </summary>
            <param name="_first">The first value to store</param>
            <param name="_second">The second value to hold</param>
        </member>
        <member name="F:InternalModBot.DoubleValueHolder`2.FirstValue">
            <summary>
            The first value held by this object
            </summary>
        </member>
        <member name="F:InternalModBot.DoubleValueHolder`2.SecondValue">
            <summary>
            The second value held by this object
            </summary>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.op_Equality(InternalModBot.DoubleValueHolder{`0,`1},InternalModBot.DoubleValueHolder{`0,`1})">
            <summary>
            Compares 2 instances of the <see cref="T:InternalModBot.DoubleValueHolder`2"/> struct
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.op_Inequality(InternalModBot.DoubleValueHolder{`0,`1},InternalModBot.DoubleValueHolder{`0,`1})">
            <summary>
            Compares 2 instances of the <see cref="T:InternalModBot.DoubleValueHolder`2"/> struct
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.Equals(System.Object)">
            <summary>
            Checks if the current instance has the same values as the given object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.DoubleValueHolder`2.ToString">
            <summary>
            Gets info about the current value and places it in a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.ErrorChanger">
            <summary>
            Used by Mod-Bot to change the error on the error screen when the game crashes
            </summary>
        </member>
        <member name="M:InternalModBot.ErrorChanger.ChangeError">
            <summary>
            Changes the error on the crash screen so that it no longer says to tell doborog of crashes
            </summary>
        </member>
        <member name="T:InternalModBot.FPSCount">
            <summary>
            Controls the FPS counter in the corner of the screen
            </summary>
        </member>
        <member name="F:InternalModBot.FPSCount.Counter">
            <summary>
            The text that displays the numbers
            </summary>
        </member>
        <member name="T:InternalModBot.RegisterShouldCursorBeEnabledDelegate">
            <summary>
            Used internally in mod-bot for telling if the cursor should be enabled or not
            </summary>
        </member>
        <member name="M:InternalModBot.RegisterShouldCursorBeEnabledDelegate.Register(System.Func{System.Boolean})">
            <summary>
            Registers a new handler, if this handler returns <see langword="true"/> the cursor will be unlocked
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:InternalModBot.RegisterShouldCursorBeEnabledDelegate.UnRegister(System.Func{System.Boolean})">
            <summary>
            Removes a handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:InternalModBot.RegisterShouldCursorBeEnabledDelegate.ShouldMouseBeEnabled">
            <summary>
            Returns <see langword="true"/> if any of the registerd handlers return <see langword="true"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.StartupManager">
            <summary>
            Used to start Mod-Bot when the game starts
            </summary>
        </member>
        <member name="M:InternalModBot.StartupManager.OnStartUp">
            <summary>
            Sets up Mod-Mot in general, called on game start
            </summary>
        </member>
        <member name="T:InternalModBot.ModSuggestingManager">
            <summary>
            Used by Mod-Bot to control the Twich mode mod suggesting
            </summary>
        </member>
        <member name="M:InternalModBot.ModSuggestingManager.ShowNextInSuggestedModsQueue">
            <summary>
            Shows the next in the suggested mods queue
            </summary>
        </member>
        <member name="M:InternalModBot.ModSuggestingManager.SuggestModMultiplayer(System.String,System.String,System.Byte[])">
            <summary>
            Brings up the suggest window for a multiplayer suggested mod
            </summary>
            <param name="suggesterPlayfabID"></param>
            <param name="modName"></param>
            <param name="data"></param>
        </member>
        <member name="M:InternalModBot.ModSuggestingManager.OnTwitchChatMessage(TwitchChatter.TwitchChatMessage@)">
            <summary>
            Gets called whenever anyone in twich chat sends a message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="F:InternalModBot.ModSuggestingManager.ModSuggestionAnimator">
            <summary>
            The animator that plays the slide in and out animation
            </summary>
        </member>
        <member name="F:InternalModBot.ModSuggestingManager.DisplayText">
            <summary>
            Text text display where all info will be displayed
            </summary>
        </member>
        <member name="T:InternalModBot.Logger">
            <summary>
            Used by Mod-Bot as the low level level of the debug console system
            </summary>
        </member>
        <member name="M:InternalModBot.Logger.Log(System.String)">
            <summary>
            Writes the specified text to the console
            </summary>
            <param name="whatToLog"></param>
        </member>
        <member name="M:InternalModBot.Logger.Log(System.String,UnityEngine.Color)">
            <summary>
            Writes the specified text to the console, now in color!
            </summary>
            <param name="whatToLog"></param>
            <param name="color"></param>
        </member>
        <member name="M:InternalModBot.Logger.RunCommand(System.String)">
            <summary>
            Gets called when the user types in a command into the input field and presses enter
            </summary>
            <param name="command"></param>
        </member>
        <member name="F:InternalModBot.Logger.Animator">
            <summary>
            The animator containing the animations for opening and closeing the console
            </summary>
        </member>
        <member name="F:InternalModBot.Logger.LogText">
            <summary>
            The complete text of the console
            </summary>
        </member>
        <member name="F:InternalModBot.Logger.Container">
            <summary>
            The GameObject thats holding the console
            </summary>
        </member>
        <member name="F:InternalModBot.Logger.InputField">
            <summary>
            the input field that commands are typed into
            </summary>
        </member>
        <member name="T:InternalModBot.UpgradeAngleSetter">
            <summary>
            Allows for users to set upgrade angles manually while in the game
            </summary>
        </member>
        <member name="T:InternalModBot.ModdedUpgradeRepresenter">
            <summary>
            Used to represent both an <see cref="T:UpgradeType"/> and a level (<see cref="T:System.Int32"/>) in Mod-Bot (the == and != operators compare the contents and not the references)
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.#ctor(UpgradeType,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:InternalModBot.ModdedUpgradeRepresenter"/> class
            </summary>
            <param name="type">The <see cref="T:UpgradeType"/> to store</param>
            <param name="level">The level of the upgrade to store</param>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.SetCustomAngle(System.Single)">
            <summary>
            Sets the angle of this upgrade
            </summary>
            <param name="newAngle">The new angle</param>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.GetAngleOffset">
            <summary>
            Gets the custom angle set to this upgrade, if no custom angle is set it will return the defualt angle
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.op_Equality(InternalModBot.ModdedUpgradeRepresenter,InternalModBot.ModdedUpgradeRepresenter)">
            <summary>
            Compares two instances of the <see cref="T:InternalModBot.ModdedUpgradeRepresenter"/> class by comparing their <see cref="T:UpgradeType"/> and level
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.op_Inequality(InternalModBot.ModdedUpgradeRepresenter,InternalModBot.ModdedUpgradeRepresenter)">
            <summary>
            Compares two instances of the <see cref="T:InternalModBot.ModdedUpgradeRepresenter"/> class by comparing their <see cref="T:UpgradeType"/> and level, and negates the result
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.Equals(System.Object)">
            <summary>
            Compares the current instance to the given <see cref="T:System.Object"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModdedUpgradeRepresenter.GetHashCode">
            <summary>
            Gets the Hash Code for the current object
            </summary>
            <returns></returns>
        </member>
        <member name="F:InternalModBot.ModdedUpgradeRepresenter.UpgradeType">
            <summary>
            The UpgradeType the object holds.
            </summary>
        </member>
        <member name="F:InternalModBot.ModdedUpgradeRepresenter.Level">
            <summary>
            The level the object holds
            </summary>
        </member>
        <member name="T:InternalModBot.UpgradePagesManager">
            <summary>
            Used by Mod-Bot to keep track of what modded upgrades are on what page
            </summary>
        </member>
        <member name="F:InternalModBot.UpgradePagesManager.CurrentPage">
            <summary>
            The page that is currently selected
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.Reset">
            <summary>
            Removes all modded upgrades and sets the current page to 0
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.RemoveModdedUpgradesFor(ModLibrary.Mod)">
            <summary>
            Removes all of the upgrades in <see cref="F:UpgradeManager.UpgradeDescriptions"/> placed there by a mod 
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.AddUpgrade(UpgradeType,System.Int32,ModLibrary.Mod)">
            <summary>
            Adds a upgrade to keep track of, this upgrade will be displayed on the page of the mod passed
            </summary>
            <param name="upgradeType"></param>
            <param name="level"></param>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.SetAngleOfModdedUpgrade(System.Single,UpgradeType,System.Int32,ModLibrary.Mod)">
            <summary>
            Sets the angle of a modded upgrade, this method will throw an exeption if the upgrade is not on the page of the mod
            </summary>
            <param name="angle"></param>
            <param name="upgradeType"></param>
            <param name="upgradeLevel"></param>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetAngleOfUpgrade(UpgradeType,System.Int32)">
            <summary>
            Gets the angle offset of a upgrade on the current page, if the upgrade isnt in the modded list, returns the defualt angleOffset of that upgrade
            </summary>
            <param name="upgradeType"></param>
            <param name="upgradeLevel"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.TryAddPage(ModLibrary.Mod)">
            <summary>
            If mod already has a page does nothing
            </summary>
            <param mod=""></param>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GenerateModPages">
            <summary>
            Generates a list where each instance in the list is a different page, and each list in that list is all the moddedUpgradeTypeAndLevels for that page (only includes active mods)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetPageForMod(ModLibrary.Mod)">
            <summary>
            Generates a list of pages, and then gets the page index of the mod passed
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetPageForMod(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{ModLibrary.Mod,System.Collections.Generic.List{InternalModBot.ModdedUpgradeRepresenter}}},ModLibrary.Mod)">
            <summary>
            Gets the page index of the mod passed from the pages list passed
            </summary>
            <param name="pages"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.TryGetModForPage(System.Int32)">
            <summary>
            Tries to get the mod responsable for a page, note that this generates a new pages list and uses that
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.TryGetModForPage(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{ModLibrary.Mod,System.Collections.Generic.List{InternalModBot.ModdedUpgradeRepresenter}}},System.Int32)">
            <summary>
            Tries to get the mod responsable for a page
            </summary>
            <param name="pages"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.NextPage">
            <summary>
            Moves the page to the next avaliable page
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.PreviousPage">
            <summary>
            Moves the page to the previus avaliable page
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.GetMaxPage">
            <summary>
            Gets the amount of pages avaliable
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.IsUpgradeVisible(UpgradeType,System.Int32)">
            <summary>
            Called from FromIsUpgradeCurrentlyVisible and if this returns false the upgrade will not be displayed
            </summary>
            <param name="type"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.ForceUpgradeVisible(UpgradeType,System.Int32)">
            <summary>
            If this returns true the upgrade will be displayed no matter what
            </summary>
            <param name="type"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.IsModdedUpgradeType(UpgradeType)">
            <summary>
            Checks if the upgrade is a modded upgrade
            </summary>
            <param name="UpgradeType"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.UpgradePagesManager.containsMod(ModLibrary.Mod)">
            <summary>
            returns true if AllModdedUpgradePages contains the passed mod
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.CloseModOptionsWindowOnEscapeKey">
            <summary>
            Attaced to mod options windows to close the window when the user clicks escape
            </summary>
        </member>
        <member name="M:InternalModBot.CloseModOptionsWindowOnEscapeKey.Init(ModLibrary.ModOptionsWindowBuilder)">
            <summary>
            Sets the owner to the value passed
            </summary>
            <param name="owner"></param>
        </member>
        <member name="T:InternalModBot.LoadedMod">
            <summary>
            Class used to keep both a mod and bool that decides if the mod is active in same list
            </summary>
        </member>
        <member name="M:InternalModBot.LoadedMod.#ctor(ModLibrary.Mod,System.Byte[],System.Boolean)">
            <summary>
            Sets the mod field to the passed mod, and will not deactivate the mod
            </summary>
            <param name="_mod"></param>
            <param name="_rawAssemblyData"></param>
            <param name="isLoadedFromFile"></param>
        </member>
        <member name="F:InternalModBot.LoadedMod.Mod">
            <summary>
            The Mod object the class is holding
            </summary>
        </member>
        <member name="F:InternalModBot.LoadedMod.IsDeactivated">
            <summary>
            Decides if the mod is deactivated.
            </summary>
        </member>
        <member name="F:InternalModBot.LoadedMod.IsOnlyLoadedInMemory">
            <summary>
            If this mod doesnt have a file
            </summary>
        </member>
        <member name="T:InternalModBot.ModDownloadInfoItem">
            <summary>
            Controlls a item in the get more mods menu
            </summary>
        </member>
        <member name="M:InternalModBot.ModDownloadInfoItem.Init(InternalModBot.ModsHolder.ModHolder)">
            <summary>
            Initilizes the <see cref="T:InternalModBot.ModDownloadInfoItem"/>
            </summary>
            <param name="holder"></param>
        </member>
        <member name="T:InternalModBot.ModsHolder">
            <summary>
            Used when deserilizing data from the site
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.Mods">
            <summary>
            A list of all the mods downloaded.
            </summary>
        </member>
        <member name="T:InternalModBot.ModsHolder.ModHolder">
            <summary>
            Used when deserilizing data from the site and represents 1 mod
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.ModHolder.Checked">
            <summary>
            Whether or not the mod is "checked", this means that its working and is checked so that it doesnt have any viruses in it.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.ModHolder.CreatorID">
            <summary>
            The name of the creator.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.ModHolder.Description">
            <summary>
            The description of the mod.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.ModHolder.DownloadLink">
            <summary>
            The download link for the mod.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.ModHolder.ImageLink">
            <summary>
            The link to the image that should be displayed.
            </summary>
        </member>
        <member name="F:InternalModBot.ModsHolder.ModHolder.ModName">
            <summary>
            The name of the mod.
            </summary>
        </member>
        <member name="T:InternalModBot.ModsManager">
            <summary>
            Handles mod loading, disableing and enableing.
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.Initialize">
            <summary>
            Loads all mods from the mods directory and deactivates remembered deactivated mods
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.ReloadMods">
            <summary>
            Clears all loaded mods and loads them again
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.LoadMod(System.Byte[],System.Boolean)">
            <summary>
            Loads a mod from only the bytes making up the assembly
            </summary>
            <param name="assemblyData"></param>
            <param name="hasFile"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.WriteDllFileToModFolder(ModLibrary.Mod)">
            <summary>
            Adds the mod to the mods folder
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.ClearCache">
            <summary>
            Clears all mod cache (including the AssetLoader cache)
            </summary>
        </member>
        <member name="M:InternalModBot.ModsManager.GetAllLoadedMods">
            <summary>
            Gets a list of all mods that should currently be active
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.GetAllMods">
            <summary>
            Gets a list of all mods currently loaded, even mods that arent currently active
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.DisableMod(ModLibrary.Mod)">
            <summary>
            Disables a mod, this will call on OnModDeactivated on the mod, and Mod-Bot will not make any more calls to the mod until activated again 
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.EnableMod(ModLibrary.Mod)">
            <summary>
            Enables a mod, this will make Mod-Bot start calling it again and also call OnModRefreshed on it
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:InternalModBot.ModsManager.IsModDeactivated(ModLibrary.Mod)">
            <summary>
            Checks if a mod is deactivated
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.ModsManager.GetIsModOnlyLoadedInMemory(ModLibrary.Mod)">
            <summary>
            Returns true if the passed mod doesnt have a file to load from
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="F:InternalModBot.ModsManager.PassOnMod">
            <summary>
            A very special mod that will call all mods the most functions passed to it on all mods
            </summary>
        </member>
        <member name="T:InternalModBot.ModsPanelManager">
            <summary>
            Used by Mod-Bot to control most of the UI in Mod-Bot, this has control over the mod buttons and mods window. Note that all functions and fields on this class are private since they more or less work on their own.
            </summary>
        </member>
        <member name="M:InternalModBot.ModsPanelManager.ReloadModItems">
            <summary>
            Refereshes what mods should be displayed in the mods menu
            </summary>
        </member>
        <member name="T:InternalModBot.OptionsSaver">
            <summary>
            Used by Mod-Bot to save mod options
            </summary>
        </member>
        <member name="M:InternalModBot.OptionsSaver.Load(System.String)">
            <summary>
            Sets the loaded options from an input json string
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.save">
            <summary>
            Saves the current loaded options to a file
            </summary>
        </member>
        <member name="M:InternalModBot.OptionsSaver.generateSaveFormatString(ModLibrary.Mod,InternalModBot.OptionsSaver.SaveFormats,System.String)">
            <summary>
            Used to make sure that mods always get saved in the same format
            </summary>
            <param name="mod"></param>
            <param name="saveFormat"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveString(ModLibrary.Mod,System.String,System.String)">
            <summary>
            Saves a string to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_string"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadString(ModLibrary.Mod,System.String)">
            <summary>
            Loads a string from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveInt(ModLibrary.Mod,System.String,System.Int32)">
            <summary>
            Saves a int to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_int"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadInt(ModLibrary.Mod,System.String)">
            <summary>
            loads an int from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveFloat(ModLibrary.Mod,System.String,System.Single)">
            <summary>
            Saves a float to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_float"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadFloat(ModLibrary.Mod,System.String)">
            <summary>
            loads a float from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.OptionsSaver.SaveBool(ModLibrary.Mod,System.String,System.Boolean)">
            <summary>
            Saves a bool to the save file and loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <param name="_bool"></param>
        </member>
        <member name="M:InternalModBot.OptionsSaver.LoadBool(ModLibrary.Mod,System.String)">
            <summary>
            loads a bool from the loaded options
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.OptionsSaver.SaveFormats">
            <summary>
            The diffrent types of save formats supported
            </summary>
        </member>
        <member name="T:InternalModBot.PassOnToModsManager">
            <summary>
            Used by Mod-Bot to call events on all loaded active mods, you probably dont want to use this from mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GetModName">
            <summary>
            Mods require us to override this one, but its never used
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GetUniqueID">
            <summary>
            Mods require us to override this one, but its never used
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnFirstPersonMoverSpawned(FirstPersonMover)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnFirstPersonMoverUpdate(FirstPersonMover)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnModRefreshed">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnLevelEditorStarted">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCommandRan(System.String)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="me"></param>
            <param name="upgrades"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterSpawned(Character)">
            <summary>
            Calls this method on all mods, also calls OnFirstPersonMoverSpawned if the passed character is a FirstPersonMover
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterUpdate(Character)">
            <summary>
            Calls this method on all mods, also calls OnFirstPersonMoverUpdate if the passed character is a firstpersonmover
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.AfterUpgradesRefreshed(FirstPersonMover,UpgradeCollection)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="owner"></param>
            <param name="upgrades"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileStartedMoving(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileUpdate(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnProjectileDestroyed(Projectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="projectile"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileStartedMoving(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileUpdate(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnArrowProjectileDestroyed(ArrowProjectile)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="arrow"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileStartedMoving(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileUpdate(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnBulletProjectileDestroyed(BulletProjectile,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="bullet"></param>
            <param name="isMortarShrapnel"></param>
            <param name="isFlameBreath"></param>
            <param name="isRepairFire"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnCharacterKilled(Character,Character,DamageSourceType)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="killedCharacter"></param>
            <param name="killerCharacter"></param>
            <param name="damageSourceType"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnModDeactivated">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.ShouldCursorBeEnabled">
            <summary>
            Gets the response from this from all loaded mods, and uses the or operator on all of them, then returns
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.GlobalUpdate">
            <summary>
            Calls this method on all mods
            </summary>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnMultiplayerEventReceived(GenericStringForModdingEvent)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="moddedEvent"></param>
        </member>
        <member name="M:InternalModBot.PassOnToModsManager.OnResourcesLoad(System.String)">
            <summary>
            Calls this method on all mods
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.UpgradeIconDownloader">
            <summary>
            Used by Mod-Bot to download icons and put them in the upgrade icons when done
            </summary>
        </member>
        <member name="M:InternalModBot.UpgradeIconDownloader.SetIconOnUpgrade(UpgradeDescription,System.String)">
            <summary>
            Sets the icon of the upgrade to the image gotten from the url
            </summary>
            <param name="upgrade"></param>
            <param name="url"></param>
        </member>
        <member name="T:InternalModBot.ModSharingManager">
            <summary>
            Used by Mod-Bot to share local mods with others on the same server
            </summary>
        </member>
        <member name="M:InternalModBot.ModSharingManager.SendModToAllModBotClients(System.Byte[],System.String)">
            <summary>
            Sends a request to all other Mod-Bot clients to download the passed byte[] and load it as a mod
            </summary>
            <param name="data"></param>
            <param name="modName"></param>
        </member>
        <member name="M:InternalModBot.ModSharingManager.OnModdedEvent(GenericStringForModdingEvent)">
            <summary>
            Called when the client recives a GenericStringForModdingEvent event
            </summary>
            <param name="moddingEvent"></param>
        </member>
        <member name="T:InternalModBot.ModdedMultiplayerEventListener">
            <summary>
            Used by Mod-Bot to catch events
            </summary>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ActivateAutomatedLaserBlastEvent)">
            <summary>
            Called when we recieve a <see cref="T:ActivateAutomatedLaserBlastEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(AllArmorDestroyedFromEMPEvent)">
            <summary>
            Called when we recieve a <see cref="T:AllArmorDestroyedFromEMPEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ArenaLiftStartedEvent)">
            <summary>
            Called when we recieve a <see cref="T:ArenaLiftStartedEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ArmorAppliedEvent)">
            <summary>
            Called when we recieve a <see cref="T:ArmorAppliedEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(BattleRoyaleAdminCommandEvent)">
            <summary>
            Called when we recieve a <see cref="T:BattleRoyaleAdminCommandEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(BlockSwordEvent)">
            <summary>
            Called when we recieve a <see cref="T:BlockSwordEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(BodyPartDamageClientEvent)">
            <summary>
            Called when we recieve a <see cref="T:BodyPartDamageClientEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(BodyPartDamageEvent)">
            <summary>
            Called when we recieve a <see cref="T:BodyPartDamageEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(BombDropperStartEvent)">
            <summary>
            Called when we recieve a <see cref="T:BombDropperStartEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(CancelArrowDrawEvent)">
            <summary>
            Called when we recieve a <see cref="T:CancelArrowDrawEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientCustomize1v1GameEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientCustomize1v1GameEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientCustomizeBattleRoyaleEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientCustomizeBattleRoyaleEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientCustomizeCoopGameEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientCustomizeCoopGameEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientGarbageInfoEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientGarbageInfoEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientLoadedLevelEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientLoadedLevelEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientRequestsFinalZoneActivation)">
            <summary>
            Called when we recieve a <see cref="T:ClientRequestsFinalZoneActivation"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientRequestsStartingLevelNowEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientRequestsStartingLevelNowEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientRequestStreamingLevelDownload)">
            <summary>
            Called when we recieve a <see cref="T:ClientRequestStreamingLevelDownload"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientRequestsUpgradeBotRelease)">
            <summary>
            Called when we recieve a <see cref="T:ClientRequestsUpgradeBotRelease"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientSelectedUpgradeEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientSelectedUpgradeEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientThinksEnemyDiedEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientThinksEnemyDiedEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ClientWantsToPlayAgainEvent)">
            <summary>
            Called when we recieve a <see cref="T:ClientWantsToPlayAgainEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(CreateAndDrawArrowEvent)">
            <summary>
            Called when we recieve a <see cref="T:CreateAndDrawArrowEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(CreateAutomatedLaserBlastEvent)">
            <summary>
            Called when we recieve a <see cref="T:CreateAutomatedLaserBlastEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(CreateCoopSpawnVFXEvent)">
            <summary>
            Called when we recieve a <see cref="T:CreateCoopSpawnVFXEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(DebugServerLogEvent)">
            <summary>
            Called when we recieve a <see cref="T:DebugServerLogEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(DeflectedArrowEvent)">
            <summary>
            Called when we recieve a <see cref="T:DeflectedArrowEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(DestroyArmorPieceClientEvent)">
            <summary>
            Called when we recieve a <see cref="T:DestroyArmorPieceClientEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(DestroyArmorPieceEvent)">
            <summary>
            Called when we recieve a <see cref="T:DestroyArmorPieceEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(DestroyArrowEvent)">
            <summary>
            Called when we recieve a <see cref="T:DestroyArrowEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(DismissAutomatedLaserBlastEvent)">
            <summary>
            Called when we recieve a <see cref="T:DismissAutomatedLaserBlastEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(FireArrowEvent)">
            <summary>
            Called when we recieve a <see cref="T:FireArrowEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(FireSpreadEvent)">
            <summary>
            Called when we recieve a <see cref="T:FireSpreadEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(FireTrapStartTimeEvent)">
            <summary>
            Called when we recieve a <see cref="T:FireTrapStartTimeEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ForcefieldRepulsionEvent)">
            <summary>
            Called when we recieve a <see cref="T:ForcefieldRepulsionEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(GenericStringForModdingEvent)">
            <summary>
            Called when we recieve a <see cref="T:GenericStringForModdingEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(HammerHitShieldEvent)">
            <summary>
            Called when we recieve a <see cref="T:HammerHitShieldEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(HammerImpactClientEvent)">
            <summary>
            Called when we recieve a <see cref="T:HammerImpactClientEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(HammerImpactEvent)">
            <summary>
            Called when we recieve a <see cref="T:HammerImpactEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(JumpPadEvent)">
            <summary>
            Called when we recieve a <see cref="T:JumpPadEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(MultiplayerKillEvent)">
            <summary>
            Called when we recieve a <see cref="T:MultiplayerKillEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(PlayCommentatorSpeechEvent)">
            <summary>
            Called when we recieve a <see cref="T:PlayCommentatorSpeechEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(SendLevelDataEvent)">
            <summary>
            Called when we recieve a <see cref="T:SendLevelDataEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ServerReceivedLevelFromClient)">
            <summary>
            Called when we recieve a <see cref="T:ServerReceivedLevelFromClient"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ServerRequestsGarbageInfoEvent)">
            <summary>
            Called when we recieve a <see cref="T:ServerRequestsGarbageInfoEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(ServerToClientsAdminCommand)">
            <summary>
            Called when we recieve a <see cref="T:ServerToClientsAdminCommand"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(SwordVisualizationEvent)">
            <summary>
            Called when we recieve a <see cref="T:SwordVisualizationEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(TriggerActivatedEvent)">
            <summary>
            Called when we recieve a <see cref="T:TriggerActivatedEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="M:InternalModBot.ModdedMultiplayerEventListener.OnEvent(UpgradeSelectionCompleteEvent)">
            <summary>
            Called when we recieve a <see cref="T:UpgradeSelectionCompleteEvent"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="T:InternalModBot.StringAndByteArrayConverterExtensions">
            <summary>
            Adds the ToBytes method to <see langword="string"/> and the RawBytesToString method to <see langword="byte"/>[]
            </summary>
        </member>
        <member name="M:InternalModBot.StringAndByteArrayConverterExtensions.ToBytes(System.String)">
            <summary>
            Converts each <see langword="char"/> in this <see langword="string"/> to a <see langword="byte"/>, and puts them in a <see langword="bye"/>[] in order
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:InternalModBot.StringAndByteArrayConverterExtensions.RawBytesToString(System.Byte[])">
            <summary>
            Converts each <see langword="byte"/> in the <see langword="byte"/>[] to a <see langword="char"/>, then combines them to a <see langword="string"/> in order
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="T:InternalModBot.UpdateChecker">
            <summary>
            Used by Mod-Bot to check if there is a newer version available
            </summary>
        </member>
    </members>
</doc>
